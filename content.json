{"meta":{"title":"Enderturtle's Blog","subtitle":null,"description":"信竞苦手","author":"Enderturtle","url":""},"pages":[{"title":"categories","date":"2021-07-09T03:16:44.634Z","updated":"2021-02-10T15:19:51.000Z","comments":false,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":"","keywords":null},{"title":"bangumi","date":"2020-03-20T08:00:00.000Z","updated":"2021-10-03T05:59:05.184Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2021-02-10T15:19:51.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"about","date":"2021-07-09T00:00:00.000Z","updated":"2021-10-03T06:13:40.772Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[qwqのEnderturtle] 与&nbsp; Enderturtle&nbsp; （ htc ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"coffee","date":"2020-03-31T05:48:57.000Z","updated":"2021-07-12T14:11:24.295Z","comments":false,"path":"coffee/index.html","permalink":"/coffee/index.html","excerpt":"","text":"忽地，她想到，为何莲子会相信我的体验故事呢。 new Artitalk({ appId: '62g7OrWwsu6PtVA61URoyFOJ-MdYXbMMI', appKey: 'cQrP0snPc0tfkCygBuw56JyU', color1: '#E6E6FA', color2: '#F0FFFF', color3: 'black', })","keywords":"秘封咖啡馆"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2021-02-10T15:19:51.000Z","comments":false,"path":"donate(not_finished)/index.html","permalink":"/donate(not_finished)/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"明文","date":"2018-12-19T15:11:06.000Z","updated":"2021-02-10T15:19:51.000Z","comments":false,"path":"exchange/index.html","permalink":"/exchange/index.html","excerpt":"The article has been encrypted, please enter your password to view.","text":"Please enter the password to read the blog. Incorrect Password! No content to display! U2FsdGVkX19snEExnH8LUyjoEH/pz7DsJYc1AqU3tYsUomWixZLBbnpQTHzkoJbhyP5PpHK2f155ZtuIWUhB8MCiyz/78PBmYDhFpJcQ6dEAQb3m5quTSBIwXbzNik0XtX6AWWm6g7sWKWj6p5/ZUSSfAeDBCXJdMP3+XhtkG0ws0DT4WrnxueO+HEQtgt4f2gW15ZE2tpDdo4h0c4V705UqyfgzGiPXQb/lBuShdQZfu+CnwlDfqmCzHhVswLa2gDymPK48KJSkOHCNtItw/QGUVZADQZs6nIQU7+tisPbnB1rhdOR56fKt5Vv6Gf/uQVVuErnoMNJ+7nFaZocB657BdKeZlkwD70iuAeNFF+lEKtxB9Q+Oc56pUPXAz/HKt6J++2v/qcRLMI7D3eOVrCW0UBLfFo6SIQe4rsFNpobuSFuEVLb7HvX+K7rofHiaxCejI5I8O94eG67Bm3bOcdPeMkouT43Y+wr7ryCBwLAkWmIoRIxXD9qF/mtVU8zeg+4QqQCvn56SE1Wu67hIQgvf7b/8VXa1U/Q1250rKMDwQWA4fPvT2eXHOcQW+TieVEYd2meYbGeL336oLEe0rsZIdMOYxdMSxHr0FPcftOaTA25G+n7gcRHAUqQmy2blF7XQaOplmvYlQSJIH0TPfkreoBxpHs1T/d1dOCuV3dJCj6C11JIi/uwiOxoeGpuFkb/jfFYcMo/2AZBh68YsSf6seAPIfa1ExQu49RPIfnI6L5henIx7LjTXskOvaNh4BkkLCH//gw24GwbPaD/v9xeGvGJP0DAu+sp7z0rYCNBqmBAKUUxk1KNTvIM3vm2fSb8sPQnJithKZWQM7DCmx+debu+i8VXN7Wr0QJ0NjI+4leAv7lWI5CiZ++Rf0JoGS7NJRC4CBbYgJ6g+GnpcBcRWB9f/fJwyK8YHpnrUigpi5Sqadh3R5FaYFYKKOrzxCnKGgFnm5NwE6E0t2hSmqZ4MHvnmBV1wPpMEdiesrgEMhupt6TRX25BhpNwigNwSreUQQA+FsTNUR4GL3u8ImDFQmohCG3U/C33eCzu2SFb/qWNP5oE3uVaGCnAY1ar2HuhnYAJdApVDPAW3Emss/F5bjciwhILkjUaGwsH3tiqcgCRgazZa/XHlE6lCubHWxzx0JwLVzK+zCiCS/XMYPI78mXKEQKe9XLgypEMH78KE8ff5Qah3LujlrDDRT3UJ","keywords":"明文"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2021-10-03T02:49:34.030Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2021-10-03T02:36:33.323Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2021-02-10T15:19:51.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2021-02-10T15:19:51.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"shuoshuo","date":"2020-03-31T05:48:57.000Z","updated":"2021-07-12T13:26:11.340Z","comments":false,"path":"shuoshuo/index.html","permalink":"/shuoshuo/index.html","excerpt":"","text":"new Artitalk({ appId: 'Qa9KgBgGBMRl9fwiS7F3qat9-MdYXbMMI', appKey: 'CIRDnIr8e5UoUQOnVX5NWLbe', color1: '#E6E6FA', color2: '#F0FFFF', color3: 'black', })","keywords":"碎碎念合集"},{"title":"tags","date":"2020-03-31T05:31:41.000Z","updated":"2021-02-10T15:19:51.000Z","comments":false,"path":"tags/index-1.html","permalink":"/tags/index-1.html","excerpt":"","text":"","keywords":null},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2021-10-03T07:15:40.253Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"冰雪小屋"},{"title":"tags","date":"2020-03-31T05:31:41.000Z","updated":"2021-02-10T15:19:51.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2021-10-03T05:53:19.181Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro Hexo主题来源于Honjun，感谢大大！","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2021-02-10T15:19:51.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"本站食用指南~","slug":"本站食用指南","date":"+201314-05-20T05:57:00.000Z","updated":"2021-10-03T06:01:51.859Z","comments":true,"path":"201314/05/20/本站食用指南/","link":"","permalink":"/201314/05/20/本站食用指南/","excerpt":"","text":"【Update 2021.10.3】 简单的建站背景一切的起因都是因为其他oier都有博客，羡慕好奇 正好看到Mashiro的博客特别好看，于是想伸手拿来。 于是，博客就建立了出来。 简单的小站框架介绍本体Hexo强力驱动 gitee pages服务 hexo功能很多 gitee在国内速度很快 图床图床采用picgo+github+jsdelivr 可能会被封，但是好用啊！ 评论评论系统采用valine+leancloud valine真的很优秀，都可以来试试 简单的小站内容介绍文章基本上我写的文章都是有关算法竞赛的题解和我自己学习的心路历程 部分文章因为题目版权问题所以加锁了，实在抱歉 如果有意要看加密问题的话，可以联系我邮箱，可能会有回复 说说（我急切想把它改成在线的）【upd:2021.7.14 通过Artitalk解决了这个问题】 基本上就是我个人的碎碎念,呜呜 有的人把这个改成TODO，我觉得我这个懒人还是算了吧 清单（我急切想把它改成在线的） 清单目前分为番组，音乐，明文 番组就是我追的番（由于本人过懒，目前好像只有超炮T） 音乐主要是我喜爱的车车曲 明文建议直接忽略（俗话说好奇心害死猫？） 关于未来一些实验性功能也会加入其中来试水 目前里面有 关于我 这个内容，可以去玩玩ww 留言板欢迎在这里发表言论 请不要引战，使用文明用语，符合社会主义核心价值观 冰雪小屋这里都是我的好友和同学 欢迎大家来这里找老婆 （？） 咖啡秘封版聊？ PIO对就是旁边的板娘，可以探索她的各种功能哦（嫌烦了也可以隐藏） 药水制作师很好玩，推荐 首页首页可以看好看的东方壁纸 我的联系方式和公告 首页壁纸右下角可以播放早苗淋雨曲pv 一些想说的话建站不易，但是收获很多 如果您发现里面的任意问题或者有建议，请务必联系我，我会好好感谢的ww 那么请欣赏我的博客吧 也许你发现了这篇文章的发布时间很独特ww","categories":[{"name":"博客相关","slug":"博客相关","permalink":"/categories/博客相关/"}],"tags":[],"keywords":[{"name":"博客相关","slug":"博客相关","permalink":"/categories/博客相关/"}]},{"title":"更新日志[2021.10.3]","slug":"update2021-10-3","date":"2021-10-03T05:38:19.000Z","updated":"2021-10-03T05:49:15.459Z","comments":true,"path":"2021/10/03/update2021-10-3/","link":"","permalink":"/2021/10/03/update2021-10-3/","excerpt":"","text":"2021.10.3更新内容： 主题颜色由橙色改为初音绿[#39C5BB] 更换大量背景图片 重做图床 调整START:DASH!! 增加新的联系方式 友人帐-&gt;冰雪小屋 2021.10.3 TODO 调整404网页 增加新板块- 版聊 增加一言（尚不清楚加在哪一个page合理） 增加新的lab 希望大家多多提意见（就在这里的评论就行！","categories":[{"name":"博客相关","slug":"博客相关","permalink":"/categories/博客相关/"}],"tags":[],"keywords":[{"name":"博客相关","slug":"博客相关","permalink":"/categories/博客相关/"}]},{"title":"国庆随笔","slug":"nationday2021","date":"2021-10-03T05:16:31.000Z","updated":"2021-10-03T05:32:03.257Z","comments":true,"path":"2021/10/03/nationday2021/","link":"","permalink":"/2021/10/03/nationday2021/","excerpt":"","text":"好像来到Cuhksz之后还没有写过文章？ 从苏州来到深圳(SZ to SZ) 直观感觉学校真的很不错，依山傍水，环境优美。 还有各种各样的活动，很用心，很尊重学生权利。 （照片就不放哩） 不过我的很多小伙伴要到国庆结束后才能开学，多放了一个月的假，xm。 希望烦心事少少，开心事多多。 还有深圳的夏天好热，都10月份了，还是很热，希望早点入秋吧！","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"NWERC2020","slug":"NWERC2020","date":"2021-10-02T10:14:55.000Z","updated":"2021-10-02T11:01:40.718Z","comments":true,"path":"2021/10/02/NWERC2020/","link":"","permalink":"/2021/10/02/NWERC2020/","excerpt":"","text":"Contest linklink -&gt; gym 103049 Experience注意精度 Problem F Problem A. Atomic EnergyDescription完全背包，物品的体积是$1,2…n$ 价值是$a_1,a_2…a_n$ 给出$q$次询问，每次询问体积恰为$k$的背包的价值是多少 $1 \\leq n \\leq 100,q \\leq 10^5\\ 1 \\leq a_i \\leq 10^9,1 \\leq k \\leq 10^9$ SolutionAnalysis经典题，考虑大数据贪心，小数据DP。 小数据进行完全背包DP，大数据按照密度（$\\frac{a_k}{k}$）贪心。 Attention进行简单时间计算，DP的上限可以设为$10^5$。 Code#include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define il inline #define inc(i,a,b) for(register int i=a;i&lt;=b;++i) #define fo(i,a,b) for(register int i=a;i&lt;=b;++i) #define dec(i,a,b) for(register int i=a;i&gt;=b;--i) #define fd(i,a,b) for(register int i=a;i&gt;=b;--i) #define pb push_back #define re register typedef long long ll; typedef double db; namespace io{ #define gc getchar il int read(){ int x=0;bool f=1;char ch=gc(); if(ch==&#39;-&#39;) f=0; while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48),ch=gc(); return f?x:-x; } } using io::read; using namespace std; /*---- head -----*/ #define N 100005 int n, q; ll a[N], f[N]; int main(){ n = read(); q = read(); fo (i, 1, n) a[i] = read(); fo (i, 1, n) f[i] = a[i]; int up = 100000; fo (i, n + 1, up) { f[i] = a[1] + f[i - 1]; fo (j, 1, n) f[i] = std::min(f[i], a[j] + f[i - j]); } fo (i, 1, q) { int now = read(); if (now &lt;= up) printf(&quot;%lld\\n&quot;, f[now]); else { ll ans; fo (k, 1, n) { int x = (now - up) / k; if ((now - up) % k) ++x; ll s = x * a[k] + f[now - x * k]; if (k == 1) ans = s; else ans = std::min(ans, s); } printf(&quot;%lld\\n&quot;, ans); } } return 0; } Problem D. Dragon BallsDescription在2维平面的第一象限上（包括坐标轴）有$n$个点 你可以询问至多$1000$次，每次询问给出坐标$(x,y)$,每次会返回离该点的最近的点的距离的平方 点的范围$0 \\leq x \\leq 10^6,0\\leq y \\leq 10^6$ 点的个数$1 \\leq n\\leq 7$ 返回的距离$0 \\leq d \\leq2\\times 10^{12}$ SolutionAnalysis官方题解给出了众多解法，这边提出一个简易交互做法。 第一次询问$(0,0)$ 得到返回的值$d$，考虑枚举以$(0,0)$为圆心，半径为$\\sqrt d$的圆上的整点。 注意到$d \\leq 10^{12}$，在这个情景下，整点数目不会很多。 Attention询问的点对$(x,y)$务必保证在数据范围内，否则评测姬会返回TLE。 Code#include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define il inline #define inc(i,a,b) for(register int i=a;i&lt;=b;++i) #define fo(i,a,b) for(register int i=a;i&lt;=b;++i) #define dec(i,a,b) for(register int i=a;i&gt;=b;--i) #define fd(i,a,b) for(register int i=a;i&gt;=b;--i) #define pb push_back #define re register typedef long long ll; typedef double db; namespace io{ #define gc getchar il ll read(){ ll x=0;bool f=1;char ch=gc(); if(ch==&#39;-&#39;) f=0; while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48),ch=gc(); return f?x:-x; } } using io::read; using namespace std; /*---- head -----*/ int n; int main(){ n=read(); ll mn=1e6; rep(id,1,n){ puts(&quot;0 0&quot;); fflush(stdout); ll d=read(); if(d==0) continue; for(register ll x=0;x*x&lt;=d;++x){ ll y=(ll)(sqrt(d-x*x)+0.1); if((y*y+x*x)!=d) continue; if(x&gt;mn || y&gt;mn) continue; printf(&quot;%lld %lld\\n&quot;,x,y); fflush(stdout); ll d2=read(); if(d2==0) break; } } return 0; } Problem E. EndgameDescription在$n \\times n$的棋盘上两人进行移动。每次两人可以选择如下操作之一： 1.进行两次给定的移动 2.移动到任意没有棋子的位置 3.不移动 共有$n$个给定移动模式，负数表示向左或者向上，不能移动到界外 初始状态Alice在$a_x,b_x$，Bob在$b_x,b_y$，Alice先动，如果Alice能抓到Bob，则Alice获胜； 如果Alice能走到一个Bob不能走到的点，则平局在这个点； 其他情况，Bob获胜。 $2 \\leq n \\leq 10^5$ SolutionAnalysis对于Alice获胜，直接判断是否能走到 对于平局，考虑平局的点会很多（理由：移动模式的数量级在$n$，棋盘有$n \\times n$个格点） 考虑随机化平局的点，如果能判断就平局； 其他情况Bob获胜。 Attention待补严谨证明 Code#include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define il inline #define inc(i,a,b) for(register int i=a;i&lt;=b;++i) #define fo(i,a,b) for(register int i=a;i&lt;=b;++i) #define dec(i,a,b) for(register int i=a;i&gt;=b;--i) #define fd(i,a,b) for(register int i=a;i&gt;=b;--i) #define pb push_back #define re register typedef long long ll; typedef double db; namespace io{ #define gc getchar il int read(){ int x=0;bool f=1;char ch=gc(); if(ch==&#39;-&#39;) f=0; while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48),ch=gc(); return f?x:-x; } } using io::read; using namespace std; /*---- head -----*/ #define mp make_pair map&lt;pair&lt;int,int&gt; ,bool&gt; table; pair&lt;int,int&gt; a[100010]; int n,ax,ay,bx,by; il bool ok(int dx,int dy,int x,int y){ if(dx==0 &amp;&amp; dy==0) return 1; if(table[mp(dx,dy)]) return 1; rep(i,1,n){ int nx=x+a[i].first; int ny=y+a[i].second; if(nx&lt;1 || ny&lt;1 || nx&gt;n || ny&gt;n) continue; if(table[mp(dx-a[i].first,dy-a[i].second)]) return 1; } return 0; } int main(){ n=read(); ax=read(),ay=read(),bx=read(),by=read(); rep(i,1,n){ int dx=read(),dy=read(); table[make_pair(dx,dy)]=1; a[i]=make_pair(dx,dy); } if(ok(bx-ax,by-ay,ax,ay)){ puts(&quot;Alice wins&quot;);return 0;} int T=500; while(T--){ int x=rand()%n+1,y=rand()%n+1; if(!ok(x-bx,y-by,bx,by)){ printf(&quot;tie %d %d&quot;,x,y); return 0; } } puts(&quot;Bob wins&quot;); return 0; } Problem J. Joint ExcavationDescription蛮有趣的一个题 给一个$n$个点$m$条边的无向连通图。 求构造一种方案。 删除图中的一条简单路径，使剩下的部分可以分成两个集合$S_1,S_2$，满足$|S_1| = |S_2|$，$S_1$与$S_2$不连通。 保证数据给出一组解。 $1\\leq n \\leq 210^5,0\\leq m \\le 210^5$ SolutionAnalysis考虑一个基本性质，无向图的dfs树是没有横叉边，只有返祖边的。如果删除dfs树从根开始的一条路径，那么各个子树一定不互相连通。 此时题目完全等价于：给定一棵树，从根节点删除一条路径，使剩余完整的子树可以分成数量相同的两部分。 考虑一种贪心策略： 对于一个点的轻儿子，我们将分配给$S_1$或者$S_2$（取决于当前谁的$|S|$更小） 对于一个点的重儿子，我们考虑两种情况，如果分配给集合已经满足题意，就直接return，如果没有我们可以继续这个操作。 Attention事实上，我们可以通过以下方式来证明为什么这样子操作是对的。 对于一个子树，我们考虑当$|S_1| \\le |S_2|$就加入到$S_1$中。 这样子每轮操作完，必定保证此时$|S_1| \\ge |S_2|$，每一层都保证这个，并且二者的差会逐渐缩小 对于最后一层，一定有一个单独的叶子节点可以产生贡献（正/负），使得$|S_1|=|S_2|$。 Code#include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define il inline #define inc(i,a,b) for(register int i=a;i&lt;=b;++i) #define fo(i,a,b) for(register int i=a;i&lt;=b;++i) #define dec(i,a,b) for(register int i=a;i&gt;=b;--i) #define fd(i,a,b) for(register int i=a;i&gt;=b;--i) #define pb push_back #define re register typedef long long ll; typedef double db; namespace io{ #define gc getchar il int read(){ int x=0;bool f=1;char ch=gc(); if(ch==&#39;-&#39;) f=0; while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48),ch=gc(); return f?x:-x; } } using io::read; using namespace std; /*---- head -----*/ const int N=200100,M=200100; struct node{ int sz,v; il bool operator &lt;(const node &amp; other) const{ return sz&gt;other.sz; } };vector&lt;node&gt; g[N]; struct Edge{ int v,nxt; } e[M&lt;&lt;1];int head[N],tot; bool vis[N]; il int dfs(int u){ // cerr&lt;&lt;u&lt;&lt;endl; vis[u]=1; int sz=1; for(register int i=head[u];i;i=e[i].nxt){ int v=e[i].v; if(vis[v]) continue; int sz_v=dfs(v); sz+=sz_v; g[u].push_back((node){sz_v,v}); } sort(g[u].begin(),g[u].end()); return sz; } int suma,sumb,ans,res[N],a[N],b[N],cnt_a,cnt_b; il void solve(int u){ res[++ans]=u; for(register unsigned i=1;i&lt;g[u].size();++i){ int v=g[u][i].v,sz=g[u][i].sz; if(suma&lt;=sumb){ suma+=sz; a[++cnt_a]=v; } else{ sumb+=sz; b[++cnt_b]=v; } } if(g[u].size()){ int v=g[u][0].v,sz=g[u][0].sz; if(suma+sz==sumb){ suma+=sz; a[++cnt_a]=v; return; } if(sumb+sz==suma){ sumb+=sz; b[++cnt_b]=v; return; } solve(v); } } int n,m; il void add_edge(int u,int v){ e[++tot]=(Edge){v,head[u]}; head[u]=tot; } il void print(int u){ printf(&quot;%d &quot;,u); for(register unsigned i=0;i&lt;g[u].size();++i){ int v=g[u][i].v; print(v); } } int main(){ n=read();m=read(); rep(i,1,m){ int u=read(),v=read(); add_edge(u,v); add_edge(v,u); } dfs(1); solve(1); printf(&quot;%d %d\\n&quot;,ans,suma); rep(i,1,ans) printf(&quot;%d &quot;,res[i]); puts(&quot;&quot;); rep(i,1,cnt_a) print(a[i]); puts(&quot;&quot;); rep(i,1,cnt_b) print(b[i]); puts(&quot;&quot;); return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:简单","slug":"难度-简单","permalink":"/tags/难度-简单/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"gym102114A","slug":"gym102114A","date":"2021-09-30T00:30:54.000Z","updated":"2021-09-30T00:47:35.193Z","comments":true,"path":"2021/09/30/gym102114A/","link":"","permalink":"/2021/09/30/gym102114A/","excerpt":"","text":"这份代码RE，待调 ProblemDescription给一张仙人掌图，求 $\\sum(i \\otimes j \\otimes maxflow(i,j))$ $\\otimes$ 表示异或 InputThe first line contains one integer T, indicating the number of test cases. The following lines describe all the test cases. For each test case: The first line contains two integers n and m. Each of the following m lines contains three integers u, v and w, indicating a bidirectional edge between vertex u and vertex v that can transmit at most w bits per second in each direction. It is guaranteed that the sum of n in all test cases does not exceed 106 and the size of the standard input file does not exceed 26 MiB. OutputFor each test case, print the answer in one line. Sample Input2 3 3 1 2 5 2 3 6 3 1 5 5 6 1 2 5 2 3 6 3 1 5 3 4 6 4 5 5 5 3 6 Sample Output27 116 HINTSolutionAnalysis问题一：考虑对于一棵树，我们只需要从大到小插入边就可以统计$maxflow$。 问题二：对于仙人掌，我们考虑对于环该如何操作，环的$maxflow$是两条的$maxflow$，我们可以通过将这个环上的最小边破开 将最小边的权值加入到其他边上，转换为问题一。 Attention尚不明确为什么RE Code#include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define il inline typedef long long ll; const int N=1e5+10,M=2e5+10; using namespace std; struct Edge{ int u,v; ll w; int nxt; il bool operator &lt;(const Edge &amp;other) const{ return w&gt;other.w; } } e[M],edge[M&lt;&lt;1],tmp[M];int head[N],tot,cnt; il void add_edge(int u,int v,ll w){ ++tot; e[tot].u=u;e[tot].v=v;e[tot].w=w;e[tot].nxt=head[u]; head[u]=tot; } int n,m; namespace find_union{ int fa[N]; il void init(){ rep(i,1,n) fa[i]=i;} il int find(int x){ if(x==fa[x]) return x;return fa[x]=find(fa[x]);} il void merge(int x,int y){ fa[y]=x;} } int dfs_clock,dfn[N],low[N],fa[N],from[N]; il void circle(int u,int v,int lst){ int num=0; while(v!=u){ tmp[++num]=e[from[v]]; v=fa[v]; } tmp[++num]=e[lst]; ll res=LLONG_MAX; rep(i,1,num){ if(tmp[i].w&lt;res){ res=tmp[i].w; v=i; } } rep(i,1,num){ if(i==v) continue; edge[++cnt]=tmp[i]; edge[cnt].w+=res; } } il void tarjan(int u,int f){ dfn[u]=low[u]=++dfs_clock; fa[u]=f; for(register int i=head[u];i;i=e[i].nxt){ int v=e[i].v; if(v==f) continue; if(!dfn[v]){ from[v]=i;tarjan(v,u);low[u]=min(low[u],low[v]);} else low[u]=min(low[u],dfn[v]); } for(register int i=head[u];i;i=e[i].nxt){ int v=e[i].v; if(low[v]&gt;dfn[u]) edge[++cnt]=e[i]; else if(dfn[v]&gt;dfn[u] &amp;&amp; fa[v]!=u) circle(u,v,i); } // cerr&lt;&lt;u&lt;&lt;&#39; &#39;&lt;&lt;dfn[u]&lt;&lt;&#39; &#39;&lt;&lt;low[u]&lt;&lt;endl; } unsigned long long ans,c[N][31][2]; il void init(){ dfs_clock=tot=cnt=0; ans=0; find_union::init(); rep(i,1,n){ head[i]=dfn[i]=low[i]=fa[i]=0; rep(j,0,30){ c[i][j][0]=((i&gt;&gt;j)&amp;1)^1; c[i][j][1]=c[i][j][0]^1; } } } int main(){ int T;scanf(&quot;%d&quot;,&amp;T); while(T--){ scanf(&quot;%d%d&quot;,&amp;n,&amp;m); init(); rep(i,1,m){ int u,v;ll w;scanf(&quot;%d%d%lld&quot;,&amp;u,&amp;v,&amp;w); add_edge(u,v,w); add_edge(v,u,w); } tarjan(1,-1); sort(edge+1,edge+1+cnt); rep(i,1,cnt){ int fu=find_union::find(edge[i].u); int fv=find_union::find(edge[i].v); ll w=edge[i].w; rep(j,0,30){ ll k=(w&amp;(1ll&lt;&lt;j)); k=bool(k); ans+=c[fu][j][0]*c[fv][j][k^1]*(1ll&lt;&lt;j); ans+=c[fu][j][1]*c[fv][j][k]*(1ll&lt;&lt;j); // cerr&lt;&lt;fv&lt;&lt;&#39; &#39;&lt;&lt;j&lt;&lt;&#39; &#39;&lt;&lt;c[fv][j][0]&lt;&lt;&#39; &#39;&lt;&lt;c[fv][j][1]&lt;&lt;endl; } // cerr&lt;&lt;ans&lt;&lt;endl; find_union::merge(fu,fv); rep(j,0,30){ c[fu][j][0]+=c[fv][j][0]; c[fu][j][1]+=c[fv][j][1]; } } printf(&quot;%llu\\n&quot;,ans); } return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:中等","slug":"难度-中等","permalink":"/tags/难度-中等/"},{"name":"每日一题","slug":"每日一题","permalink":"/tags/每日一题/"},{"name":"图论","slug":"图论","permalink":"/tags/图论/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"arc092_f Two Faced Edges","slug":"arc092f","date":"2021-09-27T01:05:43.000Z","updated":"2021-09-28T01:30:27.271Z","comments":true,"path":"2021/09/27/arc092f/","link":"","permalink":"/2021/09/27/arc092f/","excerpt":"","text":"ProblemDescription给定一个$n$个点，$m$条边的有向无环无重边图。 求判断若一条边$edge$翻转后，强连通分量数量是否变化。 $1\\le N \\le 1000$ $1 \\leq M \\leq 200,000$ Input$N$ $M$ $u_1$ $v_1$ …… $u_m$ $v_m$ Output$M$​ lines same or diff Sample Input5 9 3 2 3 1 4 1 4 2 3 5 5 3 3 4 1 2 2 5 Sample Outputsame same same same same diff diff diff diff HINTAtcoder跑得飞快 SolutionAnalysis考虑一条边$u$​-&gt;$v$​什么时候会变，考虑忽略这条边 1.$v$可到达$u$ 2.$v$可到达$u$ 以上两者条件当且仅当满足一个条件强连通分量就会变化 考虑如何计算 (1) 直接记录对于每个点$v$可到达的所有点$u$； (2) 考虑强制走第一条边 ​ 记录每个点首先来自于哪个点 ​ $p$：$v_1…v_k$​ ​ $q$：$v_k…v_1$ ​ 如果$p$和$q$相同，表示这是唯一一条边，如果忽略这条边，二者将不可达。 Attention$O(nm)$ Code#include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define il inline using namespace std; const int N=1010,M=200100; vector&lt;int&gt; e[N]; struct node{ int u,v; } g[M]; int vis[N][N],p[N][N],q[N][N]; il void dfs1(int u,int *a){ a[u]=1; for(register unsigned i=0;i&lt;e[u].size();++i){ if(a[e[u][i]]) continue; dfs1(e[u][i],a); } } il void dfs(int u,int *a,int w){ a[u]=w; for(register unsigned i=0;i&lt;e[u].size();++i){ if(a[e[u][i]]) continue; dfs(e[u][i],a,w); } } int n,m; int main(){ scanf(&quot;%d%d&quot;,&amp;n,&amp;m); rep(i,1,m){ scanf(&quot;%d%d&quot;,&amp;g[i].u,&amp;g[i].v); e[g[i].u].push_back(g[i].v); } rep(u,1,n){ dfs1(u,vis[u]); p[u][u]=q[u][u]=u; for(register unsigned i=0;i&lt;e[u].size();++i){ if(p[u][e[u][i]]) continue; dfs(e[u][i],p[u],e[u][i]); } reverse(e[u].begin(),e[u].end()); for(register unsigned i=0;i&lt;e[u].size();++i){ if(q[u][e[u][i]]) continue; dfs(e[u][i],q[u],e[u][i]); } } rep(i,1,m){ if(vis[g[i].v][g[i].u]^(p[g[i].u][g[i].v]!=q[g[i].u][g[i].v])) puts(&quot;diff&quot;); else puts(&quot;same&quot;); } return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:简单","slug":"难度-简单","permalink":"/tags/难度-简单/"},{"name":"atcoder","slug":"atcoder","permalink":"/tags/atcoder/"},{"name":"每日一题","slug":"每日一题","permalink":"/tags/每日一题/"},{"name":"思维","slug":"思维","permalink":"/tags/思维/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"arc092_d Two Sequences","slug":"arc092d","date":"2021-09-26T00:24:36.000Z","updated":"2021-09-26T01:07:25.887Z","comments":true,"path":"2021/09/26/arc092d/","link":"","permalink":"/2021/09/26/arc092d/","excerpt":"","text":"ProblemDescription给定n个数的数组A和数组B，求所有A[i]+B[j]的异或和(1&lt;=i,j&lt;=n)。n&lt;=200000。 Inputn $a_1,a_2…a_n$ $b_1,b_2…b_3$ OutputPrint the result of the computation. Sample Input6 4 6 0 0 3 3 0 5 6 5 0 3 Sample Output8 HINT$n&lt;=200000$ SolutionAnalysis考虑低位对高位的贡献。 对于某一位$k$，考虑什么情况下$a_i+b_j$对这位产生贡献。 显然的事实是如果$a_i+b_j$​对$k$产生了贡献，那么只会低位对高位产生贡献即： $base=(1&lt;&lt;(k+1))-1$ 只需考虑$a_i\\&amp;base$​和$b_i\\&amp;base$​对$k$这位的贡献。 显然的是$max(a_i+b_j)=(base&lt;&lt;1)$​，即$a_i+b_j$的最高位不会大于$k+1$； 考虑什么时候不产生贡献： (1) $a_i+b_j &lt; (1&lt;&lt;k)$ (2) $(1&lt;&lt;(k+1))\\le a_i+b_j &lt;(1&lt;&lt;(k+1)+(1&lt;&lt;k))$ 对每层${b}$按照${b\\&amp;base}$排序，对于每个$a_i$产生的贡献即为 $A$:$a_i+b_j\\ge(1&lt;&lt;k)$ $B$:$(1&lt;&lt;(k+1))\\le a_i+b_j &lt;(1&lt;&lt;(k+1)+(1&lt;&lt;k))$ $sum=A-B$ Attention注意二分边界 Code#include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define il inline typedef long long ll; using namespace std; il int read(){ int x;scanf(&quot;%d&quot;,&amp;x);return x;} const int N=200010; ll a[N],b[N],c[N];int n; il ll find(ll x,ll v){ v-=x; int l=1,r=n,res=0; while(l&lt;=r){ int mid=(l+r)&gt;&gt;1; if(c[mid]&gt;=v){ res=mid;l=mid+1;} else r=mid-1; } return res; } int main(){ n=read(); rep(i,1,n) a[i]=read(); rep(i,1,n) b[i]=read(); ll ans=0; rep(k,1,29){ ll base=(1&lt;&lt;k)-1,sum=0; rep(i,1,n) c[i]=(b[i]&amp;base); sort(c+1,c+1+n,greater&lt;ll&gt;()); rep(i,1,n) sum+=find(a[i]&amp;base,(1&lt;&lt;(k-1))); rep(i,1,n) sum-=find(a[i]&amp;base,(1&lt;&lt;k))-find(a[i]&amp;base,(1&lt;&lt;k)+(1&lt;&lt;(k-1))); if(sum&amp;1) ans+=(1&lt;&lt;(k-1)); } printf(&quot;%lld\\n&quot;,ans); return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:中等","slug":"难度-中等","permalink":"/tags/难度-中等/"},{"name":"atcoder","slug":"atcoder","permalink":"/tags/atcoder/"},{"name":"每日一题","slug":"每日一题","permalink":"/tags/每日一题/"},{"name":"思维","slug":"思维","permalink":"/tags/思维/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"CF643G Choosing Ads","slug":"CF643G-Choosing-Ads","date":"2021-07-09T15:53:36.000Z","updated":"2021-07-09T16:08:28.147Z","comments":true,"path":"2021/07/09/CF643G-Choosing-Ads/","link":"","permalink":"/2021/07/09/CF643G-Choosing-Ads/","excerpt":"","text":"ProblemDescription给定一个长度为$n$的序列和一个整数 $p$。 有 $m$ 个操作，操作要么是区间赋值，要么是询问区间内出现次数至少占 $p$% 的数。 输出询问的答案时，可以包含错的数，也可以重复输出，但对的数一定要在答案中，且输出的数的个数不超过$[\\frac{100}{p}]$（下取整） Input第一行$n$，$m$，$p$。 接下来$m$行是询问 包含$opt$，$l$，$r$，$a$（可无）。 如果$opt=1$表示区间$[l,r]$赋值为$a$ 如果$opt=2$表示询问$[l,r]$ Output对每一个$opt=2$，先输出个数，再输出具体数字 Sample Input5 9 33 1 2 1 3 3 2 1 5 2 1 5 2 1 3 2 3 3 1 2 4 5 2 1 5 2 3 5 1 4 5 1 2 1 5 Sample Output3 1 2 3 2 1 3 2 2 1 3 1 1000 1000 1 5 2 5 3 2 1 5 HINT$n,m \\leq 1.5\\times 10^3$ $20 \\leq p \\leq 100$ SolutionAnalysis考虑$p&gt;50$时，我们采用绝对众数投票法获得答案 同理，如果$p\\leq50$我们可以统计一部分可能的众数来获得答案 保留的名单个数应该为$\\frac{100}{q}$ Attention可用重载运算符减小代码数量 Code//Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define pii pair&lt;int,int&gt; #define mp(a,b) make_pair(a,b) typedef long long ll; using namespace std; il void filejudge(){ freopen(&quot;.in&quot;,&quot;r&quot;,stdin); freopen(&quot;.out&quot;,&quot;w&quot;,stdout); } il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ const int N=150100; #define ls (o&lt;&lt;1) #define rs ((o&lt;&lt;1)|1) int n,m,p; struct node{ int num[8],sum[8],tag,len; il node operator +(const node &amp; other) const{ node res=other; res.tag=0; rep(i,1,len){ bool f=0; rep(j,1,res.len) if(num[i]==res.num[j]){ res.sum[j]+=sum[i]; f=1; } if(f) continue; if(res.len&lt;p){ res.len++; res.num[res.len]=num[i]; res.sum[res.len]=sum[i]; }else{ int mn=INT_MAX,pos=0; rep(j,1,res.len) if(res.sum[j]&lt;mn){ mn=res.sum[j];pos=j;} if(res.sum[pos]&gt;sum[i]) rep(j,1,res.len) res.sum[j]-=sum[i]; else{ int k=res.sum[pos]; rep(j,1,res.len) res.sum[j]-=k; res.sum[pos]=sum[i]-k; res.num[pos]=num[i]; int lst=0; rep(j,1,res.len) if(res.sum[j]&gt;0){ lst++; res.num[lst]=res.num[j]; res.sum[lst]=res.sum[j]; } res.len=lst; } } } return res; } } t[N&lt;&lt;2]; int a[N]; il void up(int o){ t[o]=t[ls]+t[rs];} il void down(int o,int oo,int sum){ t[oo].tag=t[o].tag; t[oo].len=1; t[oo].num[1]=t[o].tag; t[oo].sum[1]=sum; } il void pushdown(int o,int l,int r){ if(!t[o].tag) return; int mid=(l+r)&gt;&gt;1; down(o,ls,mid-l+1); down(o,rs,r-mid); t[o].tag=0; } il void make(int o,int l,int r,int addv){ t[o].tag=addv; t[o].len=1; t[o].num[1]=addv; t[o].sum[1]=r-l+1; } il void update(int o,int l,int r,int L,int R,int addv){ if(l&gt;=L &amp;&amp; r&lt;=R){ make(o,l,r,addv);return;} pushdown(o,l,r); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) update(ls,l,mid,L,R,addv); if(R&gt;mid) update(rs,mid+1,r,L,R,addv); up(o); } il node query(int o,int l,int r,int L,int R){ if(l&gt;=L &amp;&amp; r&lt;=R) return t[o]; pushdown(o,l,r); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid &amp;&amp; R&gt;mid) return query(ls,l,mid,L,R)+query(rs,mid+1,r,L,R); if(L&lt;=mid) return query(ls,l,mid,L,R); if(R&gt;mid) return query(rs,mid+1,r,L,R); } il void build(int o,int l,int r){ if(l==r){ make(o,l,r,a[l]);return;} int mid=(l+r)&gt;&gt;1; build(ls,l,mid); build(rs,mid+1,r); up(o); } int main(){ n=read();m=read();p=read();p=100/p; rep(i,1,n) a[i]=read(); build(1,1,n); while(m--){ int opt=read(),l=read(),r=read(); if(opt==1){ int addv=read(); update(1,1,n,l,r,addv); }else{ node ans=query(1,1,n,l,r); printf(&quot;%d &quot;,ans.len); rep(i,1,ans.len) printf(&quot;%d &quot;,ans.num[i]); puts(&quot;&quot;); } } return 0; } 太菜了，码力不足，写了1h","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"/tags/线段树/"},{"name":"难度:中等","slug":"难度-中等","permalink":"/tags/难度-中等/"},{"name":"众数","slug":"众数","permalink":"/tags/众数/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"新春快乐","slug":"新春快乐","date":"2021-02-11T16:00:00.000Z","updated":"2021-02-11T15:59:12.000Z","comments":true,"path":"2021/02/12/新春快乐/","link":"","permalink":"/2021/02/12/新春快乐/","excerpt":"","text":"祝大家新春快乐！ 好久没更新了抱歉 希望我能2021高考成功吧！","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"完全平方数","slug":"完全平方数","date":"2020-04-28T09:27:15.000Z","updated":"2021-02-10T15:19:51.000Z","comments":true,"path":"2020/04/28/完全平方数/","link":"","permalink":"/2020/04/28/完全平方数/","excerpt":"","text":"ProblemDescription本题1不是完全平方数 小 X 自幼就很喜欢数。但奇怪的是，他十分讨厌完全平方数。他觉得这些数看起来很令人难受。由此，他也讨厌所有是完全平方数的正整数倍的数。然而这丝毫不影响他对其他数的热爱。 这天是小X的生日，小 W 想送一个数给他作为生日礼物。当然他不能送一个小X讨厌的数。他列出了所有小X不讨厌的数，然后选取了第 K个数送给了小X。小X很开心地收下了。 然而现在小 W 却记不起送给小X的是哪个数了。你能帮他一下吗？ Input包含多组测试数据。文件第一行有一个整数 T，表示测试数据的组数。 第2至第T+1*行每行有一个整数K描述一组数据，含义如题目中所描述。 Output含T 行，分别对每组数据作出回答。第 i 行输出相应的第K个不是完全平方数的正整数倍的数。 Sample Input4 1 13 100 1234567 Sample Output1 19 163 2030745 HINT$T&lt;=50$ $K&lt;=10^9$ SolutionAnalysis还是不太清晰理解出莫比乌斯函数的本质，一上来就无脑直接令$\\mu^2$杜教筛二分。然而其实$\\mu$本身就已经是个容斥了，很完美符合了题目要求。 Attention二分的上界和数据类型 Code//Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define pii pair&lt;int,int&gt; #define mp(a,b) make_pair(a,b) typedef long long ll; using namespace std; il void filejudge(){ freopen(&quot;.in&quot;,&quot;r&quot;,stdin); freopen(&quot;.out&quot;,&quot;w&quot;,stdout); } il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ const int N=45010; bitset&lt;45001&gt; zhi;int pri[N],mu[N],tot; il void shai(){ const int MAXN=45000; mu[1]=1;zhi[1]=1; rep(i,2,MAXN){ if(zhi[i]==0) pri[++tot]=i,mu[i]=-1; for(register int j=1;j&lt;=tot &amp;&amp; pri[j]*i&lt;=MAXN;++j){ zhi[pri[j]*i]=1; if(i%pri[j]==0){ mu[pri[j]*i]=0; break; } mu[pri[j]*i]=-mu[i]; } } } il int check(int x){ int res=0; for(register int i=1;i*i&lt;=x;++i) res+=1ll*mu[i]*(x/(i*i)); return res; } int main(){ shai(); int T=read(); while(T--){ int k=read(); int l=1,r=(k&lt;&lt;1),ans=1; while(l&lt;=r){ int mid=((ll)l+(ll)r)&gt;&gt;1; int sum=check(mid); if(sum&gt;=k){ if(sum==k) ans=mid; r=mid-1; } else l=mid+1; } printf(&quot;%d\\n&quot;,ans); } return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:简单","slug":"难度-简单","permalink":"/tags/难度-简单/"},{"name":"数论","slug":"数论","permalink":"/tags/数论/"},{"name":"容斥","slug":"容斥","permalink":"/tags/容斥/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"[SDOI2013]随机数生成器","slug":"SDOI2013-随机数生成器","date":"2020-04-24T07:20:32.000Z","updated":"2021-02-10T15:19:51.000Z","comments":true,"path":"2020/04/24/SDOI2013-随机数生成器/","link":"","permalink":"/2020/04/24/SDOI2013-随机数生成器/","excerpt":"","text":"ProblemDescription小W喜欢读书，尤其喜欢读《约翰克里斯朵夫》。最近小W准备读一本新书，这本书一共有$P$页，页码范围为$0 \\cdots P-1$。 小W很忙，所以每天只能读一页书。为了使事情有趣一些，他打算使用NOI2012上学习的线性同余法生成一个序列，来决定每天具体读哪一页。 我们用Xi来表示通过这种方法生成出来的第$i$个数，也即小W第$i$天会读哪一页。这个方法需要设置$3$个参数$a,b,X1$，满足$0\\leq a,b,X1\\leq p-1$，且$a,b,X1$都是整数。按照下面的公式生成出来一系列的整数：$X_{i+1} \\equiv aX_i+b \\pmod p$。 但是这种方法可能导致某两天读的页码一样。 小W要读这本书的第$t$页，所以他想知道最早在哪一天能读到第t页，或者指出他永远不会读到第$t$页。 Input输入含有多组数据，第一行一个正整数$T$，表示这个测试点内的数据组数。 接下来T行，每行有五个整数$p，a，b，X1，t$，表示一组数据。保证$X1$和$t$都是合法的页码。 注意：$P$一定为质数。 Output共$T$行，每行一个整数表示他最早读到第$t$页是哪一天。如果他永远不会读到第$t$页，输出-1。 Sample Input3 7 1 1 3 3 7 2 2 2 0 7 2 2 2 1 Sample Output1 3 -1 HINT$2 \\leq p \\leq 10^9$ SolutionAnalysis这其实是个非常简单的题，之所以记录一下题解是因为网上绝大部分的题解都是错的（至少我后来搜到的没有一个是正确的），关于一些特判讲的很含糊。 我们设解为$n$ 分类讨论： $a=0$ ：显然只要特判$t=b$就结束了； $a=1$ ：直接解$t \\equiv X+(n-1)b$，注意要通过特判$b=0$和$t-x \\equiv gcd(p,b)$； $a=others$ 首先惯例大力推式子，根据简单的高中数列知识可以推到这样的式子： a^{n-1}(X-\\frac{b}{1-a}) \\equiv t-\\frac{b}{1-a}很多文章就直接左边式子$X-\\frac{b}{1-a}$直接除到了右边，这是显然不对的，因为这个式子可能为$0$。这个就导致了很多题解说要特判$t=x$的情况（但大多数题解都只认为这个只是加速了运算，跟正确性无关），所以我简单解释一下这个特判的重要性。 我们简单回想一下，这个式子为$0$的必要条件应该是$X\\equiv \\frac{b}{1-a}$。此时如果该方程有解时$t-\\frac{b}{1-a} \\equiv 0$，也就是说$X=t$。所以说这种特判影响了正确性。同时也解决了case #1 #2中的对于解为$1$的特殊情况。 Attention其他还有点小细节如在case #2 中的$n+1$不需要取模之类的。 Code//Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define pii pair&lt;int,int&gt; #define mp(a,b) make_pair(a,b) typedef long long ll; using namespace std; il void filejudge(){ freopen(&quot;.in&quot;,&quot;r&quot;,stdin); freopen(&quot;.out&quot;,&quot;w&quot;,stdout); } il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ il ll ksm(ll x,ll y,ll mod){ ll res=1;x%=mod; while(y){ if(y&amp;1) res=res*x%mod; x=x*x%mod; y&gt;&gt;=1; } return res; } il ll inv(ll x,ll mod){ return ksm(x,mod-2,mod); } map&lt;ll,ll&gt; s; il ll bsgs(ll a,ll b,ll p){ s.clear(); ll m=ceil(sqrt(p)),now=b; rep(i,0,m){ s[now]=i; now=now*a%p; } a=ksm(a,m,p); now=a; rep(i,1,m){ if(s.find(now)!=s.end()) return 1ll*i*m-s[now]; now=now*a%p; } return -2; } il int gcd(int a,int b){ while(b){ int t=a; a=b; b=t%b; } return a; } il void solve(){ ll p=read(),a=read(),b=read(),x=read(),t=read(),ans=0; if(x==t) puts(&quot;1&quot;); else if(a==0){ if(b==t) puts(&quot;2&quot;); else puts(&quot;-1&quot;); }else if(a==1){ t=(t-x+p)%p; if(b==0 || t%gcd(b,p)) puts(&quot;-1&quot;); else{ ans=(t*inv(b,p)%p+1; printf(&quot;%lld\\n&quot;,ans); } }else{ ll res=b*inv((1-a+p)%p,p)%p; res=(t-res+p)%p*inv((x-res+p)%p,p)%p; ans=bsgs(a,res,p)+1; printf(&quot;%lld\\n&quot;,ans); } } int main(){ int T=read(); while(T--) solve(); return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:简单","slug":"难度-简单","permalink":"/tags/难度-简单/"},{"name":"BSGS","slug":"BSGS","permalink":"/tags/BSGS/"},{"name":"数论","slug":"数论","permalink":"/tags/数论/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"CF1336","slug":"CF1336","date":"2020-04-16T09:52:47.000Z","updated":"2021-02-10T15:19:51.000Z","comments":true,"path":"2020/04/16/CF1336/","link":"","permalink":"/2020/04/16/CF1336/","excerpt":"","text":"难得的国人赛，但我是憨憨。 Problem AAnalysis考虑贪心，我一个点选了，那么这个点必然子树也选了，所以一个点$u$的贡献是$sz[u]-dep[u]$。直接排序选前$k$大的就行。 Attention无 Code//Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define pii pair&lt;int,int&gt; #define mp(a,b) make_pair(a,b) typedef long long ll; using namespace std; il void filejudge(){ freopen(&quot;.in&quot;,&quot;r&quot;,stdin); freopen(&quot;.out&quot;,&quot;w&quot;,stdout); } il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ const int N=2e5+10; struct Edge{ int v,nxt; } e[N&lt;&lt;1];int head[N],tot; il void add_edge(int u,int v){ e[++tot]=(Edge){v,head[u]};head[u]=tot;} il void link(int u,int v){ add_edge(u,v);add_edge(v,u);} int n,k,dep[N],sz[N],a[N]; ll ans; il void dfs(int u,int f){ dep[u]=dep[f]+1; sz[u]=1; repe(i,u){ int v=e[i].v; if(v==f) continue; dfs(v,u); sz[u]+=sz[v]; } a[u]=dep[u]-sz[u]; } int main(){ n=read();k=read(); rep(i,2,n){ int u=read(),v=read();link(u,v);} dfs(1,1);sort(a+1,a+1+n,greater&lt;int&gt;()); rep(i,1,k) ans+=(ll)(a[i]); printf(&quot;%lld\\n&quot;,ans); return 0; } Problem BAnalysis憨憨题。考虑如果我们固定了3个值中的最小值$mn$和最大值$mx$，那么根据简单的不等式我们可以知道第三个最佳的值是$\\frac{(mn+mx)}{2}$。枚举$mn$，确定$mx$，然后大力二分第三个值就行了。 Attention（lower_bound在从小到大排序的数组中是找到第一个大于等于的值） Code//Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define pii pair&lt;int,int&gt; #define mp(a,b) make_pair(a,b) typedef long long ll; using namespace std; il void filejudge(){ freopen(&quot;.in&quot;,&quot;r&quot;,stdin); freopen(&quot;.out&quot;,&quot;w&quot;,stdout); } il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ const int N=1e5+10; const ll INF=LLONG_MAX; int r[N],g[N],b[N]; int nr,ng,nb; il ll calc(int x,int y,int z){ if(x&lt;=0 || y&lt;=0 || z&lt;=0 || x==(nr+1) || y==(ng+1) || z==(nb+1)) return INF; ll xx=(r[x]-g[y]),yy=(g[y]-b[z]),zz=(r[x]-b[z]); return xx*xx+yy*yy+zz*zz; } int main(){ int T=read(); while(T--){ nr=read();ng=read();nb=read(); rep(i,1,nr) r[i]=read();sort(r+1,r+1+nr);r[nr+1]=INT_MAX; rep(i,1,ng) g[i]=read();sort(g+1,g+1+ng);g[ng+1]=INT_MAX; rep(i,1,nb) b[i]=read();sort(b+1,b+1+nb);b[nb+1]=INT_MAX; int x,y,z; ll ans=LLONG_MAX; rep(i,1,nr){ x=i; y=lower_bound(g+1,g+1+ng,r[x])-g; if(y!=(ng+1)){ z=lower_bound(b+1,b+1+nb,(r[x]+g[y])/2)-b; ans=min(ans,calc(x,y,z)); ans=min(ans,calc(x,y,z-1)); } y--; if(y!=0){ z=lower_bound(b+1,b+1+nb,(r[x]+g[y])/2)-b; ans=min(ans,calc(x,y,z)); ans=min(ans,calc(x,y,z-1)); } z=lower_bound(b+1,b+1+nb,r[x])-b; if(z!=(nb+1)){ y=lower_bound(g+1,g+1+ng,(r[x]+b[z])/2)-g; ans=min(ans,calc(x,y,z)); ans=min(ans,calc(x,y-1,z)); } z--; if(z!=0){ y=lower_bound(g+1,g+1+ng,(r[x]+b[z])/2)-g; ans=min(ans,calc(x,y,z)); ans=min(ans,calc(x,y-1,z)); } } rep(i,1,ng){ y=i; z=lower_bound(b+1,b+1+nb,g[y])-b; if(z!=(nb+1)){ x=lower_bound(r+1,r+1+nr,(g[y]+b[z])/2)-r; ans=min(ans,calc(x,y,z)); ans=min(ans,calc(x-1,y,z)); } z--; if(z!=0){ x=lower_bound(r+1,r+1+nr,(g[y]+b[z])/2)-r; ans=min(ans,calc(x,y,z)); ans=min(ans,calc(x-1,y,z)); } } printf(&quot;%lld\\n&quot;,ans); } return 0; } Problem CAnalysis区间$dp$，将$T$长度补到$len_s$（保证正确性），$dp[l][r]$表示目前已经匹配了$T$中的$[l,r]$的字符串。 Attention无 Code//Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define pii pair&lt;int,int&gt; #define mp(a,b) make_pair(a,b) typedef long long ll; using namespace std; il void filejudge(){ freopen(&quot;.in&quot;,&quot;r&quot;,stdin); freopen(&quot;.out&quot;,&quot;w&quot;,stdout); } il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ const int N=3010,mod=998244353; int n,m; ll dp[N][N],ans; char s[N],t[N]; il void add(ll &amp;x,ll y){ x+=y;if(x&gt;=mod) x-=mod;} int main(){ scanf(&quot;%s&quot;,s+1);n=strlen(s+1); scanf(&quot;%s&quot;,t+1);m=strlen(t+1); rep(i,1,n+1) dp[i][i-1]=1; rep(i,1,n){ for(register int l=1,r=i;r&lt;=n;++l,++r){ if(l&gt;m || t[l]==s[i]) add(dp[l][r],dp[l+1][r]); if(r&gt;m || t[r]==s[i]) add(dp[l][r],dp[l][r-1]); } } rep(i,m,n) add(ans,dp[1][i]); printf(&quot;%lld&quot;,ans); return 0; } Problem DAnalysis等我想写再写 Attention实际上是因为我菜 Codeorz","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"总结","slug":"总结","permalink":"/tags/总结/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"[ZJOI2015]幻想乡战略游戏","slug":"ZJOI2015-幻想乡战略游戏","date":"2020-04-01T13:47:58.000Z","updated":"2021-02-10T15:19:51.000Z","comments":true,"path":"2020/04/01/ZJOI2015-幻想乡战略游戏/","link":"","permalink":"/2020/04/01/ZJOI2015-幻想乡战略游戏/","excerpt":"","text":"ProblemDescription傲娇少女幽香正在玩一个非常有趣的战略类游戏，本来这个游戏的地图其实还不算太大，幽香还能管得过来，但是不知道为什么现在的网游厂商把游戏的地图越做越大，以至于幽香一眼根本看不过来，更别说和别人打仗了。 在打仗之前，幽香现在面临一个非常基本的管理问题需要解决。 整个地图是一个树结构，一共有 $n$块空地，这些空地被 $n-1$条带权边连接起来，使得每两个点之间有一条唯一的路径将它们连接起来。 在游戏中，幽香可能在空地上增加或者减少一些军队。同时，幽香可以在一个空地上放置一个补给站。 如果补给站在点 $u$ 上，并且空地 $v$上有 $d_v$ 个单位的军队，那么幽香每天就要花费 $d_v \\times \\text{dist}(u,v)$的金钱来补给这些军队。由于幽香需要补给所有的军队，因此幽香总共就要花费为 $\\sum (d_v \\times \\text{dist}(u,v))$（其中$1 \\leq v \\leq N$）的代价，$\\text{dist}(u,v)dist$表示 $u$个 $v$ 在树上的距离（唯一路径的权和）。 因为游戏的规定，幽香只能选择一个空地作为补给站。在游戏的过程中，幽香可能会在某些空地上制造一些军队，也可能会减少某些空地上的军队，进行了这样的操作以后，出于经济上的考虑，幽香往往可以移动他的补给站从而省一些钱。但是由于这个游戏的地图是在太大了，幽香无法轻易的进行最优的安排，你能帮帮她吗？ 你可以假定一开始所有空地上都没有军队。 Input第一行两个数 n和 Q分别表示树的点数和幽香操作的个数，其中点从1到n标号。 接下来 n-1 行，每行三个正整数 a,b,c，表示a和b之间有一条边权为c的边。 接下来 Q 行，每行两个数 u,e，表示幽香在点 u上放了 e单位个军队（如果 e&lt;0，就相当于是幽香在 u上减少了 |e| 单位个军队，说白了就是$d_u←d_u+e$）。 数据保证任何时刻每个点上的军队数量都是非负的。 Output对于幽香的每个操作，输出操作完成以后，每天的最小花费，也即如果幽香选择最优的补给点进行补给时的花费。 Sample Input10 5 1 2 1 2 3 1 2 4 1 1 5 1 2 6 1 2 7 1 5 8 1 7 9 1 1 10 1 3 1 2 1 8 1 3 1 4 1 Sample Output0 1 4 5 6 HINT对于所有数据，$1\\le c\\le 10^3$，$0\\le |e| \\le 10^30$，$1\\le n\\le10^5$ ，$1\\le Q\\le10^5$ 非常神奇的是，对于所有数据，这棵树上的点的度数都不超过 20。 SolutionAnalysis考虑贪心，如果一个父子关系的点儿子比父亲优，那么答案一定在儿子方向（想想为什么，凸函数性质） 但是这样很糟糕，我们可能会变成$O(n)$。 考虑点分树，点分树保证了树高$log(n)$，那我们考虑如果一个点优就往这个点所在的子树的重心转移。 Attention注意点分树上信息的维护（不具有直接父子传递性） Code$O(nlog^3n)$的垃圾代码 //Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define pii pair&lt;int,int&gt; #define mp(a,b) make_pair(a,b) typedef long long ll; using namespace std; il void filejudge(){ freopen(&quot;.in&quot;,&quot;r&quot;,stdin); freopen(&quot;.out&quot;,&quot;w&quot;,stdout); } il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ const int N=100010; int n; struct Edge{ int v,w,nxt;} e[N&lt;&lt;1];int head[N],tot; il void add_edge(int u,int v,int w){ e[++tot]=(Edge){v,w,head[u]};head[u]=tot;} il void link(int u,int v,int w){ add_edge(u,v,w),add_edge(v,u,w);} namespace slpf{ int sz[N],fa[N],top[N],son[N];ll dep[N]; il void dfs1(int u,int f){ fa[u]=f;sz[u]=1; repe(i,u){ int v=e[i].v; if(v==f) continue; dep[v]=dep[u]+e[i].w; dfs1(v,u); sz[u]+=sz[v]; if(sz[v]&gt;sz[son[u]]) son[u]=v; } } il void dfs2(int u,int topf){ top[u]=topf; if(!son[u]) return; dfs2(son[u],topf); repe(i,u){ int v=e[i].v; if(v==fa[u] || v==son[u]) continue; dfs2(v,v); } } il int lca(int u,int v){ while(top[u]!=top[v]){ if(dep[top[u]]&lt;dep[top[v]]) swap(u,v); u=fa[top[u]]; } if(dep[u]&gt;dep[v]) swap(u,v); return u; } il ll getdis(int u,int v){ return dep[u]+dep[v]-2ll*dep[lca(u,v)]; } il void init(){ dfs1(1,1);dfs2(1,1);} }using slpf::getdis; Edge g[N&lt;&lt;1];int nhead[N],ntot; il void n_add_edge(int u,int v,int w){ g[++ntot]=(Edge){v,w,nhead[u]};nhead[u]=ntot;} int fa[N],sz[N],mx[N],treesz,root;bool vis[N]; il void getsz(int u,int f){ sz[u]=1; repe(i,u){ int v=e[i].v; if(v==f || vis[v]) continue; getsz(v,u); sz[u]+=sz[v]; } // cerr&lt;&lt;u&lt;&lt;&#39; &#39;&lt;&lt;sz[u]&lt;&lt;endl; } il void getroot(int u,int f){ // cerr&lt;&lt;u&lt;&lt;&#39; &#39;&lt;&lt;f&lt;&lt;endl; mx[u]=0; repe(i,u){ int v=e[i].v; if(v==f || vis[v]) continue; getroot(v,u); mx[u]=max(mx[u],sz[v]); } mx[u]=max(mx[u],treesz-mx[u]); // cerr&lt;&lt;mx[u]&lt;&lt;endl; if(mx[u]&lt;mx[root]) root=u; } il void nxtroot(int u,int f){ getsz(u,f); treesz=sz[u];root=0; getroot(u,f); } ll sum[N],sum_dis[N],sum_f[N]; il void modify(int u,int w){ sum[u]+=w; int now=u; for(;fa[u]!=0;u=fa[u]){ int f=fa[u]; ll len=getdis(now,f); sum[f]+=w; sum_dis[f]+=1ll*w*len; sum_f[u]+=1ll*w*len; } } il ll calc(int u){ ll res=sum_dis[u]; int now=u; for(;fa[u]!=0;u=fa[u]){ int f=fa[u]; ll len=getdis(now,f); res+=(sum[f]-sum[u])*len; res+=(sum_dis[f]-sum_f[u]); } return res; } ll ans; il void solve(ll u){ ans=calc(u); // cerr&lt;&lt;u&lt;&lt;&#39; &#39;&lt;&lt;ans&lt;&lt;endl; for(register int i=nhead[u];i;i=g[i].nxt){ int v=g[i].v,w=g[i].w; ll tmp=calc(w); // cerr&lt;&lt;w&lt;&lt;&#39; &#39;&lt;&lt;tmp&lt;&lt;endl; if(tmp&lt;ans){ solve(v);return;} } } il void pre(int u){ vis[u]=1; repe(i,u){ int v=e[i].v; if(vis[v]) continue; nxtroot(v,u); fa[root]=u; n_add_edge(u,root,v); pre(root); } } int main(){ n=read();int Q=read(); rep(i,2,n){ int u=read(),v=read(),w=read();link(u,v,w);} mx[0]=n+1; slpf::init(); int RT; nxtroot(1,1); RT=root; pre(root); // rep(i,1,n) cerr&lt;&lt;fa[i]&lt;&lt;&#39; &#39;; while(Q--){ int u=read(),e=read(); modify(u,e); // rep(i,1,n) cerr&lt;&lt;sum[i]&lt;&lt;&#39; &#39;&lt;&lt;sum_dis[i]&lt;&lt;endl; solve(RT); printf(&quot;%lld\\n&quot;,ans); } return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:中等","slug":"难度-中等","permalink":"/tags/难度-中等/"},{"name":"贪心","slug":"贪心","permalink":"/tags/贪心/"},{"name":"点分治","slug":"点分治","permalink":"/tags/点分治/"},{"name":"动态点分治","slug":"动态点分治","permalink":"/tags/动态点分治/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"[ZJOI2007]捉迷藏","slug":"ZJOI2007-捉迷藏","date":"2020-04-01T06:54:34.000Z","updated":"2021-02-10T15:19:51.000Z","comments":true,"path":"2020/04/01/ZJOI2007-捉迷藏/","link":"","permalink":"/2020/04/01/ZJOI2007-捉迷藏/","excerpt":"","text":"ProblemDescriptionJiajia 和 Wind 是一对恩爱的夫妻，并且他们有很多孩子。某天，Jiajia、Wind 和孩子们决定在家里玩捉迷藏游戏。他们的家很大且构造很奇特，由 $N$个屋子和$ N-1 $条双向走廊组成，这$N-1$条走廊的分布使得任意两个屋子都互相可达。 游戏是这样进行的，孩子们负责躲藏，Jiajia 负责找，而 Wind 负责操纵这 $N$个屋子的灯。在起初的时候，所有的灯都没有被打开。每一次，孩子们只会躲藏在没有开灯的房间中，但是为了增加刺激性，孩子们会要求打开某个房间的电灯或者关闭某个房间的电灯。为了评估某一次游戏的复杂性，Jiajia 希望知道可能的最远的两个孩子的距离（即最远的两个关灯房间的距离）。 我们将以如下形式定义每一种操作： C(hange) i 改变第 i个房间的照明状态，若原来打开，则关闭；若原来关闭，则打开。 G(ame) 开始一次游戏，查询最远的两个关灯房间的距离。 Input第一行包含一个整数 $N$，表示房间的个数，房间将被编号为 1,2,3…$N$ 的整数。 接下来$ N-1$行每行两个整数$a$, $b$，表示房间 $a$ 与房间 $b$ 之间有一条走廊相连。 接下来一行包含一个整数 $Q$，表示操作次数。接着 $Q$ 行，每行一个操作，如上文所示。 Output对于每一个操作 Game，输出一个非负整数，表示最远的两个关灯房间的距离。若只有一个房间是关着灯的，输出 0；若所有房间的灯都开着，输出 -1。 Sample Input8 1 2 2 3 3 4 3 5 3 6 6 7 6 8 7 G C 1 G C 2 G C 1 G Sample Output4 3 3 4 HINT对于20%的数据， $N \\leq 50$, $Q\\leq 100$； 对于60%的数据， $N \\leq 3000$, $Q \\leq 10000$ 对于100%的数据， $N \\leq 100000$, $Q \\leq 500000$ SolutionAnalysis这里给出动态点分治的一个做法（括号序列做法也许以后会补？) 简单而言就是堆去维护每个点它能到达最深的点，两条边相加。 这样子做会出现不合法的，那就再维护堆对于该点的每个儿子。 Attention简单证明一下淀粉树的正确性（防止我自己迷惑，应该大家都会这个证明（我太菜了））： 每个点把树分成了$\\sum children$个部分，这些部分都互相连边，且其余的边一定不经过$root$，那么分治下去就是子问题。 （所以淀粉树上两点的距离即使不是1也是可以正确的）（这好像就是点分治的正确性emmm） Code自带大常数，好乱啊（也许会重构？ //Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define pii pair&lt;int,int&gt; #define mp(a,b) make_pair(a,b) typedef long long ll; using namespace std; il void filejudge(){ freopen(&quot;.in&quot;,&quot;r&quot;,stdin); freopen(&quot;.out&quot;,&quot;w&quot;,stdout); } il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ const int N=100010; int n,cnt; struct node{ priority_queue&lt;int&gt; q1,q2; il void push(int x){ q1.push(x);} il void erase(int x){ q2.push(x);} il int size(){ return q1.size()-q2.size();} il int top(){ while(!q2.empty() &amp;&amp; q1.top()==q2.top()) q1.pop(),q2.pop(); return q1.top(); } il void pop(){ while(!q2.empty() &amp;&amp; q1.top()==q2.top()) q1.pop(),q2.pop(); q1.pop(); } il int top2(){ int tmp=top();pop(); int res=top();push(tmp); return res; } } h1[N],h2[N],ans; struct Edge{ int v,nxt;} e[N&lt;&lt;1];int tot,head[N]; il void add_edge(int u,int v){ e[++tot]=(Edge){v,head[u]};head[u]=tot;} il void link(int u,int v){ add_edge(u,v),add_edge(v,u);} namespace slpf{ int sz[N],fa[N],top[N],son[N],dep[N]; il void dfs1(int u,int f){ sz[u]=1;dep[u]=dep[f]+1;fa[u]=f; repe(i,u){ int v=e[i].v; if(v==f) continue; dfs1(v,u); sz[u]+=sz[v]; if(sz[v]&gt;sz[son[u]]) son[u]=v; } } il void dfs2(int u,int topf){ top[u]=topf; if(!son[u]) return; dfs2(son[u],topf); repe(i,u){ int v=e[i].v; if(v==fa[u] || v==son[u]) continue; dfs2(v,v); } } il void init(){ dfs1(1,1);dfs2(1,1);} il int lca(int u,int v){ while(top[u]!=top[v]){ if(dep[top[u]]&lt;dep[top[v]]) swap(u,v); u=fa[top[u]]; } if(dep[u]&gt;dep[v]) swap(u,v); return u; } il int getdis(int u,int v){ int c=lca(u,v); return dep[u]+dep[v]-2*dep[c]; } } using slpf::getdis; int sz[N],fa[N],mx[N],treesz,root;bool vis[N],st[N]; il void getsz(int u,int f){ sz[u]=1; repe(i,u){ int v=e[i].v; if(v==f || vis[v]) continue; getsz(v,u); sz[u]+=sz[v]; } } il void getroot(int u,int f){ mx[u]=0; repe(i,u){ int v=e[i].v; if(v==f || vis[v]) continue; getroot(v,u); mx[u]=max(mx[u],sz[v]); } mx[u]=max(mx[u],treesz-mx[u]); if(mx[u]&lt;mx[root]) root=u; } il void nxtroot(int u,int f){ getsz(u,f); root=0;treesz=sz[u]; getroot(u,f); } il void calc(int id,int u,int f){ if(!st[u]) h2[root].push(getdis(u,id)); repe(i,u){ int v=e[i].v; if(v==f || vis[v]) continue; calc(id,v,u); } } il void solve(int u){ vis[u]=1; if(!st[u]) h1[u].push(0); repe(i,u){ int v=e[i].v; if(vis[v]) continue; nxtroot(v,u); fa[root]=u; calc(u,root,root); if(h2[root].size()) h1[u].push(h2[root].top()); solve(root); } if(h1[u].size()&gt;1) ans.push(h1[u].top()+h1[u].top2()); } il void turn_on(int u){ st[u]=1;cnt--; if(h1[u].size()&gt;1) ans.erase(h1[u].top()+h1[u].top2()); h1[u].erase(0); if(h1[u].size()&gt;1) ans.push(h1[u].top()+h1[u].top2()); int now=u; for(;fa[u]!=0;u=fa[u]){ int f=fa[u]; if(h1[f].size()&gt;1) ans.erase(h1[f].top()+h1[f].top2()); int dis=getdis(now,f); h1[f].erase(h2[u].top()); h2[u].erase(dis); if(h2[u].size()) h1[f].push(h2[u].top()); if(h1[f].size()&gt;1) ans.push(h1[f].top()+h1[f].top2()); } } il void turn_off(int u){ st[u]=0;cnt++; if(h1[u].size()&gt;1) ans.erase(h1[u].top()+h1[u].top2()); h1[u].push(0); if(h1[u].size()&gt;1) ans.push(h1[u].top()+h1[u].top2()); int now=u; for(;fa[u]!=0;u=fa[u]){ int f=fa[u]; if(h1[f].size()&gt;1) ans.erase(h1[f].top()+h1[f].top2()); int dis=getdis(now,f); if(h2[u].size()) h1[f].erase(h2[u].top()); h2[u].push(dis); h1[f].push(h2[u].top()); if(h1[f].size()&gt;1) ans.push(h1[f].top()+h1[f].top2()); } } char opt[3]; int main(){ n=read(); rep(i,2,n){ int u=read(),v=read();link(u,v);} slpf::init(); mx[0]=n+1;cnt=n; nxtroot(1,1); solve(root); int Q=read(); while(Q--){ scanf(&quot;%s&quot;,opt); if(opt[0]==&#39;G&#39;){ if(cnt&lt;=1) printf(&quot;%d\\n&quot;,cnt-1); else printf(&quot;%d\\n&quot;,ans.top()); }else{ int x=read(); if(st[x]) turn_off(x); else turn_on(x); } } return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"树链剖分","slug":"树链剖分","permalink":"/tags/树链剖分/"},{"name":"难度:中等","slug":"难度-中等","permalink":"/tags/难度-中等/"},{"name":"点分治","slug":"点分治","permalink":"/tags/点分治/"},{"name":"动态点分治","slug":"动态点分治","permalink":"/tags/动态点分治/"},{"name":"删除堆","slug":"删除堆","permalink":"/tags/删除堆/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"矩阵","slug":"矩阵","date":"2019-12-31T12:37:23.000Z","updated":"2021-07-21T10:29:53.711Z","comments":false,"path":"2019/12/31/矩阵/","link":"","permalink":"/2019/12/31/矩阵/","excerpt":"The article has been encrypted, please enter your password to view.","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:困难","slug":"难度-困难","permalink":"/tags/难度-困难/"},{"name":"线性基","slug":"线性基","permalink":"/tags/线性基/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"[LGOJ3620][APIO/CTSC2007]数据备份","slug":"LGOJ3620-APIO-CTSC2007-数据备份","date":"2019-12-26T11:37:46.000Z","updated":"2021-02-10T15:19:51.000Z","comments":true,"path":"2019/12/26/LGOJ3620-APIO-CTSC2007-数据备份/","link":"","permalink":"/2019/12/26/LGOJ3620-APIO-CTSC2007-数据备份/","excerpt":"","text":"ProblemDescription你在一家 IT 公司为大型写字楼或办公楼(offices)的计算机数据做备份。然而数据备份的工作是枯燥乏味的，因此你想设计一个系统让不同的办公楼彼此之间互相备份，而你则坐在家中尽享计算机游戏的乐趣。 已知办公楼都位于同一条街上。你决定给这些办公楼配对(两个一组)。每一对办公楼可以通过在这两个建筑物之间铺设网络电缆使得它们可以互相备份。 然而，网络电缆的费用很高。当地电信公司仅能为你提供 K 条网络电缆，这意味着你仅能为 K 对办公楼(或总计 2K 个办公楼)安排备份。任一个办公楼都属于唯一的配对组(换句话说，这 2K 个办公楼一定是相异的)。 此外，电信公司需按网络电缆的长度(公里数)收费。因而，你需要选择这 K对办公楼使得电缆的总长度尽可能短。换句话说，你需要选择这 K 对办公楼，使得每一对办公楼之间的距离之和(总距离)尽可能小。 下面给出一个示例，假定你有 5 个客户，其办公楼都在一条街上，如下图所示。这 5 个办公楼分别位于距离大街起点 1km, 3km, 4km, 6km 和 12km 处。电信公司仅为你提供 K=2 条电缆。 上例中最好的配对方案是将第 1 个和第 2 个办公楼相连，第 3 个和第 4 个办公楼相连。这样可按要求使用 K=2 条电缆。第 1 条电缆的长度是 3km―1km = 2km，第 2 条电缆的长度是 6km―4km = 2 km。这种配对方案需要总长 4km 的网络电缆，满足距离之和最小的要求。 Input输入文件的第一行包含整数 n 和 k，其中 n(1≤n≤100 000)表示办公楼的数目，k(1≤k≤n/2)表示可利用的网络电缆的数目。 接下来的 n 行每行仅包含一个整数(0≤s≤1000 000 000), 表示每个办公楼到大街起点处的距离。这些整数将按照从小到大的顺序依次出现。 Output输出文件应当由一个正整数组成，给出将 2K 个相异的办公楼连成 K 对所需的网络电缆的最小总长度。 Sample Input5 2 1 3 4 6 12 Sample Output4 HINT30%的输入数据满足 n≤20。 60%的输入数据满足 n≤10 000 SolutionAnalysis考虑抽象后的题目 给定n-1个点，选k个不相邻的点使其和最小 考虑贪心 每次选最小的，但这样显然是不优秀的 如下例子： 2 1 2 10 （k=2） 先选1是不优秀的 对于这种情况我们考虑添加一个反悔机制 即当我们选择了a[i]我们重新令a[i]=a[i].lst+a[i].nxt-a[i]即解决问题 Attention注意赋值inf Code//Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define pii pair&lt;int,int&gt; #define mp(a,b) make_pair(a,b) typedef long long ll; using namespace std; il void filejudge(){ freopen(&quot;.in&quot;,&quot;r&quot;,stdin); freopen(&quot;.out&quot;,&quot;w&quot;,stdout); } il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ const int N=100010; int n,k; ll s[N]; struct my_list{ int lst,nxt; ll res; } a[N]; bool usd[N]; il void del(int id){ // del id.lst id.nxt a[id].lst=a[a[id].lst].lst; a[id].nxt=a[a[id].nxt].nxt; a[a[id].lst].nxt=id; a[a[id].nxt].lst=id; } struct node{ int id; ll res; bool operator &lt;(const node &amp; other) const{ return res&gt;other.res; } }; priority_queue&lt;node&gt; q; ll ans=0; int main(){ n=read();k=read(); rep(i,1,n) scanf(&quot;%lld&quot;,&amp;s[i]); rep(i,1,n-1){ a[i].lst=i-1; a[i].nxt=i+1; a[i].res=s[i+1]-s[i]; q.push((node){i,a[i].res}); } a[0].res=a[n].res=LLONG_MAX/3; while(k&gt;0 &amp;&amp; !q.empty()){ int id=q.top().id;ll res=q.top().res;q.pop(); if(usd[id]) continue; k--; ans+=res; usd[a[id].lst]=usd[a[id].nxt]=1; a[id].res=a[a[id].lst].res+a[a[id].nxt].res-a[id].res; q.push((node){id,a[id].res}); del(id); } printf(&quot;%lld\\n&quot;,ans); return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:中等","slug":"难度-中等","permalink":"/tags/难度-中等/"},{"name":"贪心","slug":"贪心","permalink":"/tags/贪心/"},{"name":"链表","slug":"链表","permalink":"/tags/链表/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"PNYWE-D1","slug":"PNYWE-DAY1","date":"2019-12-25T13:38:48.000Z","updated":"2021-02-10T15:19:51.000Z","comments":false,"path":"2019/12/25/PNYWE-DAY1/","link":"","permalink":"/2019/12/25/PNYWE-DAY1/","excerpt":"The article has been encrypted, please enter your password to view.","text":"Please enter the password to read the blog. Incorrect Password! No content to display! U2FsdGVkX19RtKg2tJDj+ISb1uVhchi3gxwNAvJjAvH/CrBQwUpVinwT4DBpabXYBSCJvE7lS+4tRV4M1kZmfb+7pGE/MC11BV9hkI7SRWdtzxGw6Y1psjzJtTOdvLOxFoSCJ00ytgZCbfzGoHP6yJUQrQPN0iV8gzztuXF5nqpEu3N6IsWkJUfqYabBUftrZgUbeCk6QF0buu5yUIF/S7gMfJfR1aBzZmC5dnTE1nCphaDXhWUgkvhgN/gkaO6eWOrA+D5Mi4KVxm70jYqTMwmqUvt4tJUdgBe1w6o+GlT+PpsS/un3IzoNpzJy3Dejg7rHiuw75l6bkjZe7bN2jZ0I1/5r6bfiK5Wj+W4+yXC/LoYZqOwCIHvsuyIXWPu5lX1YJniwQ4kSCpiI6ilWuYX3vPMViAwqJ+LMXzm33dOLOhtzO5Rz2vDmkghEfWu86LmhVX5zIAj+wMDZ5Sc3JFeFzGCxqrTc6g4rKvO3TU3i20FaKTT3Krsa1/NB4crqC4KfmcWrO+qc/uUa8Q5ssRiJA4o8gDtZ3AV21sWvTuR8hs7WBiMo4XSqgfdMS0XOVeZFgBSFoLUX/1Pgtlnq2/09VC/RxMEV1eMrI9B9BUWDkoruFBLo2dOazIm0gWUJvQr6SVepUFf2F4yrFvNEoH4dvGkfT4ZGFaeXIjucvdmsSgcmgpmQWjjrGFD4ZqRCxxXMwWIvTCXfCOe7LHsJfDjmdjqopmMDVnCwCPEWrBtvrL+DiMtsFhFIEX+F8K0DdKZODVsQ8KqSB582W9hb4SnDKHHoBLIWAq0/uWwXUF9ONtRNRpGLXUj4QcfzNEMastcwW2nPl1s3e2w/06Y5YAkF01HCx+/TDiW+CX903GcFKvwQa9Qf7MoPcVpd8QqVyGxdzzbai8NoFtxICgsL/H5sJtviq95x9nsGWWyQIg9sL8wO0S5mcRYQWdOw5tUc4SpfBfM6ewvP702IUUs/OAyPeRmsCs1AXsy+AuLpXQWOrxf2JaCHuhsNixpIRwCjrmBC/aKpDpukcxQZD6zStZLNa+3Gq7+Z+gHsnqHcaME9tP6RirKoJ61WlvrLk+HIwo4fDQbfwsi7F3xfmeLtiha8pP1VCecx3QhVltSgdhfjZYxFc+kzA6/Ih8l4UilQ","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"贪心","slug":"贪心","permalink":"/tags/贪心/"},{"name":"搜索","slug":"搜索","permalink":"/tags/搜索/"},{"name":"构造","slug":"构造","permalink":"/tags/构造/"},{"name":"CRT","slug":"CRT","permalink":"/tags/CRT/"},{"name":"meet in middle","slug":"meet-in-middle","permalink":"/tags/meet-in-middle/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"[LGOJ3313][SDOI2014] 旅行","slug":"LGOJ3313-SDOI2014-旅行","date":"2019-12-24T12:50:48.000Z","updated":"2021-02-10T15:19:51.000Z","comments":true,"path":"2019/12/24/LGOJ3313-SDOI2014-旅行/","link":"","permalink":"/2019/12/24/LGOJ3313-SDOI2014-旅行/","excerpt":"","text":"ProblemDescriptionS国有N个城市，编号从1到N。城市间用N-1条双向道路连接，满足从一个城市出发可以到达其它所有城市。每个城市信仰不同的宗教，如飞天面条神教、隐形独角兽教、绝地教都是常见的信仰。为了方便，我们用不同的正整数代表各种宗教， S国的居民常常旅行。旅行时他们总会走最短路，并且为了避免麻烦，只在信仰和他们相同的城市留宿。当然旅程的终点也是信仰与他相同的城市。S国政府为每个城市标定了不同的旅行评级，旅行者们常会记下途中（包括起点和终点）留宿过的城市的评级总和或最大值。在S国的历史上常会发生以下几种事件：”CC x c”：城市x的居民全体改信了c教；”CW x w”：城市x的评级调整为w;”QS x y”：一位旅行者从城市x出发，到城市y，并记下了途中留宿过的城市的评级总和；”QM x y”：一位旅行者从城市x出发，到城市y，并记下了途中留宿过的城市的评级最大值。由于年代久远，旅行者记下的数字已经遗失了，但记录开始之前每座城市的信仰与评级，还有事件记录本身是完好的。请根据这些信息，还原旅行者记下的数字。 为了方便，我们认为事件之间的间隔足够长，以致在任意一次旅行中，所有城市的评级和信仰保持不变。 Input 输入的第一行包含整数N，Q依次表示城市数和事件数。接下来N行，第i+l行两个整数Wi，Ci依次表示记录开始之前，城市i的评级和信仰。接下来N-1行每行两个整数x，y表示一条双向道路。接下来Q行，每行一个操作，格式如上所述。 Output 对每个QS和QM事件，输出一行，表示旅行者记下的数字。 Sample Input5 6 3 1 2 3 1 2 3 3 5 1 1 2 1 3 3 4 3 5 QS 1 5 CC 3 1 QS 1 5 CW 3 3 QS 1 5 QM 2 4 Sample Output8 9 11 3 HINTN，Q &lt; =10^5，C &lt; =10^5 数据保证对所有QS和QM事件，起点和终点城市的信仰相同；在任意时刻，城市的评级总是不大于10^4的正整数，且宗教值不大于C。 SolutionAnalysis 宗教不是很多，直接全上线段树就行 Attention无 Code//Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define pii pair&lt;int,int&gt; #define debug cerr&lt;&lt;&quot;OK Here&quot;&lt;&lt;endl; typedef long long ll; using namespace std; il void filejudge(){ freopen(&quot;.in&quot;,&quot;r&quot;,stdin); freopen(&quot;.out&quot;,&quot;w&quot;,stdout); } il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ const int N=100010; const int M=10000010; struct Edge{ int v,nxt; } e[N&lt;&lt;1];int head[N],tot; il void add_edge(int u,int v){ e[++tot]=(Edge){v,head[u]}; head[u]=tot; } /*--------------------*/ int n,m; int w[N],col[N]; /*--------------------*/ int sz[N],son[N],fa[N],top[N],dep[N]; int in[N],dfs_clock; il void dfs1(int u,int f){ dep[u]=dep[f]+1;sz[u]=1;fa[u]=f; repe(i,u){ int v=e[i].v; if(v==f) continue; dfs1(v,u); sz[u]+=sz[v]; if(sz[v]&gt;sz[son[u]]) son[u]=v; } } il void dfs2(int u,int topf){ top[u]=topf;in[u]=++dfs_clock; if(!son[u]) return; dfs2(son[u],topf); repe(i,u){ int v=e[i].v; if(v==fa[u] || v==son[u]) continue; dfs2(v,v); } } il int lca(int u,int v){ while(top[u]!=top[v]){ if(dep[top[u]]&lt;dep[top[v]]) swap(u,v); u=fa[top[u]]; } return dep[u]&gt;dep[v]?v:u; } /*--------------------*/ int ls[M],rs[M],mx[M],sum[M],cnt; int root[N]; il void up(int o){ mx[o]=max(mx[ls[o]],mx[rs[o]]); sum[o]=sum[ls[o]]+sum[rs[o]]; } il void modify(int &amp;o,int x,int L,int R,int c){ if(!o) o=++cnt; if(L==R){ mx[o]=sum[o]=c; return; } int mid=(L+R)&gt;&gt;1; if(x&lt;=mid) modify(ls[o],x,L,mid,c); else modify(rs[o],x,mid+1,R,c); up(o); } il int query_sum(int o,int l,int r,int L,int R){ if(!o) return 0; if(L==l &amp;&amp; R==r) return sum[o]; int mid=(L+R)&gt;&gt;1,res=0; if(l&lt;=mid) res=query_sum(ls[o],l,min(r,mid),L,mid); if(r&gt;mid) res+=query_sum(rs[o],max(l,mid+1),r,mid+1,R); return res; } il int query_max(int o,int l,int r,int L,int R){ if(!o) return 0; if(L==l &amp;&amp; R==r) return mx[o]; int mid=(L+R)&gt;&gt;1,res=0; if(l&lt;=mid) res=query_max(ls[o],l,min(r,mid),L,mid); if(r&gt;mid) res=max(res,query_max(rs[o],max(l,mid+1),r,mid+1,R)); return res; } /*--------------*/ il int solve_sum(int x,int y,int c){ int res=0; while(top[x]!=top[y]){ res+=query_sum(root[c],in[top[x]],in[x],1,n); x=fa[top[x]]; } res+=query_sum(root[c],in[y],in[x],1,n); return res; } il int solve_max(int x,int y,int c){ int res=0; while(top[x]!=top[y]){ res=max(res,query_max(root[c],in[top[x]],in[x],1,n)); x=fa[top[x]]; } res=max(res,query_max(root[c],in[y],in[x],1,n)); return res; } int main(){ n=read();m=read(); rep(i,1,n) w[i]=read(),col[i]=read(); rep(i,2,n){ int u=read(),v=read(); add_edge(u,v); add_edge(v,u); } dfs1(1,1); dfs2(1,1); rep(i,1,n) modify(root[col[i]],in[i],1,n,w[i]); while(m--){ char opt[3];scanf(&quot;%s&quot;,opt); if(opt[0]==&#39;C&#39; &amp;&amp; opt[1]==&#39;C&#39;){ int x=read(),c=read(); modify(root[col[x]],in[x],1,n,0); col[x]=c; modify(root[col[x]],in[x],1,n,w[x]); }else if(opt[0]==&#39;C&#39; &amp;&amp; opt[1]==&#39;W&#39;){ int x=read(),c=read(); modify(root[col[x]],in[x],1,n,c); w[x]=c; }else if(opt[0]==&#39;Q&#39; &amp;&amp; opt[1]==&#39;S&#39;){ int x=read(),y=read(); int c=lca(x,y); printf(&quot;%d\\n&quot;,solve_sum(x,c,col[y])+solve_sum(y,c,col[y])-((col[c]==col[y])?w[c]:0)); }else if(opt[0]==&#39;Q&#39; &amp;&amp; opt[1]==&#39;M&#39;){ int x=read(),y=read(); int c=lca(x,y); printf(&quot;%d\\n&quot;,max(solve_max(x,c,col[y]),solve_max(y,c,col[y]))); } } return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:简单","slug":"难度-简单","permalink":"/tags/难度-简单/"},{"name":"线段树","slug":"线段树","permalink":"/tags/线段树/"},{"name":"数据结构","slug":"数据结构","permalink":"/tags/数据结构/"},{"name":"树链剖分","slug":"树链剖分","permalink":"/tags/树链剖分/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"[LGOJ2982][Usaco2010 Feb] Slowing down","slug":"LGOJ2982-Usaco2010-Feb-Slowing-down","date":"2019-12-24T03:46:20.000Z","updated":"2021-02-10T15:19:51.000Z","comments":true,"path":"2019/12/24/LGOJ2982-Usaco2010-Feb-Slowing-down/","link":"","permalink":"/2019/12/24/LGOJ2982-Usaco2010-Feb-Slowing-down/","excerpt":"","text":"ProblemDescriptionEvery day each of Farmer John’s N (1 &lt;= N &lt;= 100,000) cows conveniently numbered 1..N move from the barn to her private pasture. The pastures are organized as a tree, with the barn being on pasture 1. Exactly N-1 cow unidirectional paths connect the pastures; directly connected pastures have exactly one path. Path i connects pastures A_i and B_i (1 &lt;= A_i &lt;= N; 1 &lt;= B_i &lt;= N). Cow i has a private pasture P_i (1 &lt;= P_i &lt;= N). The barn’s small door lets only one cow exit at a time; and the patient cows wait until their predecessor arrives at her private pasture. First cow 1 exits and moves to pasture P_1. Then cow 2 exits and goes to pasture P_2, and so on. While cow i walks to P_i she might or might not pass through a pasture that already contains an eating cow. When a cow is present in a pasture, cow i walks slower than usual to prevent annoying her friend. Consider the following pasture network, where the number between parentheses indicates the pastures&#39; owner. 1 (3) / \\ (1) 4 3 (5) / \\ (2) 2 5 (4) First, cow 1 walks to her pasture: 1 (3) / \\ [1] 4* 3 (5) / \\ (2) 2 5 (4) When cow 2 moves to her pasture, she first passes into the barn&#39;s pasture, pasture 1. Then she sneaks around cow 1 in pasture 4 before arriving at her own pasture. 1 (3) / \\ [1] 4* 3 (5) / \\ [2] 2* 5 (4) Cow 3 doesn&#39;t get far at all -- she lounges in the barn&#39;s pasture, #1. 1* [3] / \\ [1] 4* 3 (5) / \\ [2] 2* 5 (4) Cow 4 must slow for pasture 1 and 4 on her way to pasture 5: 1* [3] / \\ [1] 4* 3 (5) / \\ [2] 2* 5* [4] Cow 5 slows for cow 3 in pasture 1 and then enters her own private pasture: 1* [3] / \\ [1] 4* 3*[5] / \\ [2] 2* 5* [4] Input* Line 1: Line 1 contains a single integer: N * Lines 2..N: Line i+1 contains two space-separated integers: A_i and B_i * Lines N+1..N+N: line N+i contains a single integer: P_i Output* Lines 1..N: Line i contains the number of times cow i has to slow down. Sample Input5 1 4 5 4 1 3 2 4 4 2 1 5 3 Sample Output0 1 0 2 1 HINT无 SolutionAnalysisdfs序维护子树信息 Attention无 Code//Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define lowbit(x) (x&amp;-x) #define pii pair&lt;int,int&gt; #define mp(a,b) make_pair(a,b) typedef long long ll; using namespace std; il void filejudge(){ freopen(&quot;.in&quot;,&quot;r&quot;,stdin); freopen(&quot;.out&quot;,&quot;w&quot;,stdout); } il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ const int N=100010; int n; struct Edge{ int v,nxt; } e[N&lt;&lt;1];int head[N],tot; il void add_edge(int u,int v){ e[++tot]=(Edge){v,head[u]}; head[u]=tot; } int c[N]; int in[N],out[N],cnt; il void dfs(int u,int fa){ in[u]=++cnt; repe(i,u){ int v=e[i].v; if(v==fa) continue; dfs(v,u); } out[u]=cnt; } il void add(int x,int addv){ for(;x&lt;=n+1;x+=lowbit(x)){ c[x]+=addv; } } il int query(int x){ int res=0; for(;x&gt;0;x-=lowbit(x)) res+=c[x]; return res; } int main(){ n=read(); rep(i,2,n){ int u=read(),v=read(); add_edge(u,v); add_edge(v,u); } dfs(1,1); rep(i,1,n){ int a=read(); printf(&quot;%d\\n&quot;,query(in[a])); add(in[a],1); add(out[a]+1,-1); } return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:简单","slug":"难度-简单","permalink":"/tags/难度-简单/"},{"name":"数据结构","slug":"数据结构","permalink":"/tags/数据结构/"},{"name":"dfs序","slug":"dfs序","permalink":"/tags/dfs序/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"[CF413E] Maze 2D","slug":"CF413E-Maze-2D","date":"2019-12-24T03:12:09.000Z","updated":"2021-02-10T15:19:51.000Z","comments":true,"path":"2019/12/24/CF413E-Maze-2D/","link":"","permalink":"/2019/12/24/CF413E-Maze-2D/","excerpt":"","text":"ProblemDescriptionThe last product of the R2 company in the 2D games’ field is a new revolutionary algorithm of searching for the shortest path in a 2 × nmaze. Imagine a maze that looks like a 2 × n rectangle, divided into unit squares. Each unit square is either an empty cell or an obstacle. In one unit of time, a person can move from an empty cell of the maze to any side-adjacent empty cell. The shortest path problem is formulated as follows. Given two free maze cells, you need to determine the minimum time required to go from one cell to the other. Unfortunately, the developed algorithm works well for only one request for finding the shortest path, in practice such requests occur quite often. You, as the chief R2 programmer, are commissioned to optimize the algorithm to find the shortest path. Write a program that will effectively respond to multiple requests to find the shortest path in a 2 × n maze. InputThe first line contains two integers, n and m (1 ≤ n ≤ 2·105; 1 ≤ m ≤ 2·105) — the width of the maze and the number of queries, correspondingly. Next two lines contain the maze. Each line contains n characters, each character equals either ‘.‘ (empty cell), or ‘X‘ (obstacle). Each of the next m lines contains two integers v**i and u**i (1 ≤ v**i, u**i ≤ 2n) — the description of the i-th request. Numbers v**i, u**i mean that you need to print the value of the shortest path from the cell of the maze number v**i to the cell number u**i. We assume that the cells of the first line of the maze are numbered from 1 to n, from left to right, and the cells of the second line are numbered from n + 1 to 2n from left to right. It is guaranteed that both given cells are empty. OutputPrint m lines. In the i-th line print the answer to the i-th request — either the size of the shortest path or -1, if we can’t reach the second cell from the first one. Sample Input4 7 .X.. ...X 5 1 1 3 7 7 1 4 6 1 4 7 5 7 Sample Output4 7 .X.. ...X 5 1 1 3 7 7 1 4 6 1 4 7 5 7 HINT无 SolutionAnalysis直接进行查询操作 Attention无 Code//Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define pii pair&lt;int,int&gt; #define mp(a,b) make_pair(a,b) typedef long long ll; using namespace std; il void filejudge(){ freopen(&quot;.in&quot;,&quot;r&quot;,stdin); freopen(&quot;.out&quot;,&quot;w&quot;,stdout); } il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ const int N=200001; const int inf=0x3f3f3f3f; int n,m; char a[3][N]; #define ls (o&lt;&lt;1) #define rs ((o&lt;&lt;1)|1) struct node{ int d1,d2,d3,d4; }t[N&lt;&lt;2]; //d1 左上-&gt;右上 //d2 左上-&gt;右下 //d3 左下-&gt;右上 //d4 左下-&gt;右下 il node merge(node A,node B){ node res; res.d1=min(inf,min(A.d1+B.d1,A.d2+B.d3)+1); res.d2=min(inf,min(A.d1+B.d2,A.d2+B.d4)+1); res.d3=min(inf,min(A.d3+B.d1,A.d4+B.d3)+1); res.d4=min(inf,min(A.d4+B.d4,A.d3+B.d2)+1); return res; } il node query(int o,int l,int r,int L,int R){ if(l==L &amp;&amp; r==R) return t[o]; int mid=(L+R)&gt;&gt;1; if(r&lt;=mid) return query(ls,l,r,L,mid); if(l&gt;mid) return query(rs,l,r,mid+1,R); return merge(query(ls,l,mid,L,mid),query(rs,mid+1,r,mid+1,R)); } il void build(int o,int l,int r){ if(l==r){ t[o].d1=t[o].d2=t[o].d3=t[o].d4=inf; if(a[1][l]==&#39;.&#39;) t[o].d1=0; if(a[2][l]==&#39;.&#39;) t[o].d4=0; if(a[1][l]==&#39;.&#39; &amp;&amp; a[2][l]==&#39;.&#39;) t[o].d2=t[o].d3=1; return; } int mid=(l+r)&gt;&gt;1; build(ls,l,mid);build(rs,mid+1,r); t[o]=merge(t[ls],t[rs]); } int main(){ n=read();m=read(); rep(i,1,2) scanf(&quot;%s&quot;,a[i]+1); build(1,1,n); while(m--){ int x=read(),y=read(); bool se1=0,se2=0; if(x&gt;n) x-=n,se1=1; if(y&gt;n) y-=n,se2=1; if(x&gt;y){ swap(x,y); swap(se1,se2); } node ans=query(1,x,y,1,n); if(se1){ if(se2) printf(&quot;%d\\n&quot;,(ans.d4==inf)?-1:ans.d4); else printf(&quot;%d\\n&quot;,(ans.d3==inf)?-1:ans.d3); }else{ if(se2) printf(&quot;%d\\n&quot;,(ans.d2==inf)?-1:ans.d2); else printf(&quot;%d\\n&quot;,(ans.d1==inf)?-1:ans.d1); } } return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:简单","slug":"难度-简单","permalink":"/tags/难度-简单/"},{"name":"线段树","slug":"线段树","permalink":"/tags/线段树/"},{"name":"数据结构","slug":"数据结构","permalink":"/tags/数据结构/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"欢迎有缘人进入","slug":"欢迎有缘人进入","date":"2019-12-23T11:11:25.000Z","updated":"2021-02-10T15:19:51.000Z","comments":false,"path":"2019/12/23/欢迎有缘人进入/","link":"","permalink":"/2019/12/23/欢迎有缘人进入/","excerpt":"The article has been encrypted, please enter your password to view.","text":"密码是我喜欢的数字 Incorrect Password! No content to display! U2FsdGVkX1+qSzr+xvwQmP0xqMpD05IdtFsrzo3XK0HZ37J1rgRIq6BUVASpoqGV88tD91qyzDcjL+dzKE/9fjLpzKLsZ+rzo2cm10HpK/eA8qg9/XmggsDclIw+r0yQ4R15phOO0sXf8vQZA2HZ53Zz+9uhJowMk5AAHiSJx3ypC3yFWEYe+Ro/ybgtKDYFu67w/LPt9Nj8tkObaNWMG1WlcBoSyT9uPm48GgV1o47H2hJwkx9JshDiIdJiv6hnklGaUQIUyvyqD9DDrgSNu62q8jf1pLS1jiyUx78ERnA=","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"[LGOJ2486][SDOI2011] 染色","slug":"LGOJ2486-SDOI2011-染色","date":"2019-12-23T05:35:23.000Z","updated":"2021-02-10T15:19:51.000Z","comments":true,"path":"2019/12/23/LGOJ2486-SDOI2011-染色/","link":"","permalink":"/2019/12/23/LGOJ2486-SDOI2011-染色/","excerpt":"","text":"ProblemDescription给定一棵有n个节点的无根树和m个操作，操作有2类： 1、将节点a到节点b路径上所有点都染成颜色c； 2、询问节点a到节点b路径上的颜色段数量（连续相同颜色被认为是同一段），如“112221”由3段组成：“11”、“222”和“1”。 请你写一个程序依次完成这m个操作。 Input第一行包含2个整数n和m，分别表示节点数和操作数； 第二行包含n个正整数表示n个节点的初始颜色 下面 行每行包含两个整数x和y，表示x和y之间有一条无向边。 下面 行每行描述一个操作： “C a b c”表示这是一个染色操作，把节点a到节点b路径上所有点（包括a和b）都染成颜色c； “Q a b”表示这是一个询问操作，询问节点a到节点b（包括a和b）路径上的颜色段数量。 Output对于每个询问操作，输出一行答案。 Sample Input6 5 2 2 1 2 1 1 1 2 1 3 2 4 2 5 2 6 Q 3 5 C 2 1 1 Q 3 5 C 5 1 2 Q 3 5 Sample Output3 1 2 HINT$n,m \\leq 10^5 $ $col\\leq10^9$ SolutionAnalysis建立树链（重链）剖分和线段树。 线段树维护三个信息：答案，左颜色，右颜色即可。 Attention合并两个树上路径可以先找lca,然后query(u,lca)+query(v,lca)-1即为答案 Code//Code by Enderturtle #include&lt;bits/stdc++.h&gt; #define rep(i,a,b) for(register int i=a;i&lt;=b;++i) #define repe(i,a) for(register int i=head[a];i;i=e[i].nxt) #define il inline #define pii pair&lt;int,int&gt; #define mp(a,b) make_pair(a,b) typedef long long ll; using namespace std; il int read(){ int x=0;bool f=1;char ch=getchar(); while(!isdigit(ch)){if(ch==&#39;-&#39;) f=0;ch=getchar();} while(isdigit(ch)){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();} return f?x:-x; } /*----- head end -----*/ int n,m; const int N=1e5+10; struct Edge{ int v,nxt; } e[N&lt;&lt;1];int head[N],tot; il void add(int u,int v){ e[++tot]=(Edge){v,head[u]}; head[u]=tot; } int dep[N],son[N],sz[N],top[N],fa[N]; il void dfs1(int u,int f){ fa[u]=f;dep[u]=dep[f]+1;sz[u]=1; repe(i,u){ int v=e[i].v; if(v==f) continue; dfs1(v,u); sz[u]+=sz[v]; if(sz[v]&gt;sz[son[u]]) son[u]=v; } } int in[N],a[N],col[N],dfs_clock; il void dfs2(int u,int topf){ in[u]=++dfs_clock;top[u]=topf; a[dfs_clock]=col[u]; if(!son[u]) return; dfs2(son[u],topf); repe(i,u){ int v=e[i].v; if(v==fa[u] || v==son[u]) continue; dfs2(v,v); } } il int lca(int u,int v){ while(top[u]!=top[v]){ if(dep[top[u]]&lt;dep[top[v]]) swap(u,v); u=fa[top[u]]; } return (dep[u]&gt;dep[v])?v:u; } /*-------------*/ struct node{ int sum; int l_col,r_col; } t[N&lt;&lt;2]; int lazy[N&lt;&lt;2]; #define ls (o&lt;&lt;1) #define rs ((o&lt;&lt;1)|1) il void up(int o){ t[o].sum=t[ls].sum+t[rs].sum-(t[ls].r_col==t[rs].l_col); t[o].l_col=t[ls].l_col; t[o].r_col=t[rs].r_col; } il void push_down(int o){ if(!lazy[o]) return; t[ls].sum=t[rs].sum=1; t[ls].l_col=t[ls].r_col=t[rs].l_col=t[rs].r_col=lazy[o]; lazy[ls]=lazy[rs]=lazy[o]; lazy[o]=0; } il void build(int o,int l,int r){ if(l==r){ t[o].sum=1; t[o].l_col=t[o].r_col=a[l]; return; } int mid=(l+r)&gt;&gt;1; build(ls,l,mid);build(rs,mid+1,r); up(o); } il node query(int o,int l,int r,int L,int R){ if(l==L &amp;&amp; r==R) return t[o]; push_down(o); int mid=(L+R)&gt;&gt;1; node lson,rson,res; lson.sum=lson.l_col=lson.r_col=0; rson.sum=rson.l_col=rson.r_col=0; if(l&lt;=mid) lson=query(ls,l,min(mid,r),L,mid); if(r&gt;mid) rson=query(rs,max(l,mid+1),r,mid+1,R); res.sum=lson.sum+rson.sum-(lson.r_col==rson.l_col); if(lson.l_col!=0){ res.l_col=lson.l_col; }else res=rson; if(rson.r_col!=0){ res.r_col=rson.r_col; }else res=lson; return res; } il void update(int o,int l,int r,int L,int R,int change){ if(l==L &amp;&amp; r==R){ t[o].sum=1; t[o].l_col=t[o].r_col=change; lazy[o]=change; return; } push_down(o); int mid=(L+R)&gt;&gt;1; if(l&lt;=mid) update(ls,l,min(mid,r),L,mid,change); if(r&gt;mid) update(rs,max(l,mid+1),r,mid+1,R,change); up(o); } /*----------------*/ il int query_col(int u,int c){ node res; res.l_col=res.sum=res.r_col=0; while(top[u]!=top[c]){ node tmp=query(1,in[top[u]],in[u],1,n); if(res.r_col==0) res=tmp; else{ res.sum+=(tmp.sum-(tmp.r_col==res.l_col)); res.l_col=tmp.l_col; } u=fa[top[u]]; } node tmp=query(1,in[c],in[u],1,n); if(res.r_col==0) res=tmp; else res.sum+=(tmp.sum-(tmp.r_col==res.l_col)); return res.sum; } il void update_dis(int u,int c,int change){ while(top[u]!=top[c]){ update(1,in[top[u]],in[u],1,n,change); u=fa[top[u]]; } update(1,in[c],in[u],1,n,change); } int main(){ n=read();m=read(); rep(i,1,n) col[i]=read(); rep(i,2,n){ int u=read(),v=read(); add(u,v); add(v,u); } dfs1(1,1); dfs2(1,1); build(1,1,n); while(m--){ char opt[2];scanf(&quot;%s&quot;,opt); if(opt[0]==&#39;C&#39;){ int u=read(),v=read(),change=read(); int c=lca(u,v); update_dis(u,c,change); update_dis(v,c,change); }else{ int u=read(),v=read(); int c=lca(u,v); printf(&quot;%d\\n&quot;,query_col(u,c)+query_col(v,c)-1); } } return 0; }","categories":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}],"tags":[{"name":"难度:简单","slug":"难度-简单","permalink":"/tags/难度-简单/"},{"name":"线段树","slug":"线段树","permalink":"/tags/线段树/"},{"name":"数据结构","slug":"数据结构","permalink":"/tags/数据结构/"},{"name":"树链剖分","slug":"树链剖分","permalink":"/tags/树链剖分/"}],"keywords":[{"name":"OI","slug":"OI","permalink":"/categories/OI/"}]},{"title":"New_Blog","slug":"New_Blog","date":"2019-12-22T10:00:00.000Z","updated":"2021-07-09T08:56:07.294Z","comments":true,"path":"2019/12/22/New_Blog/","link":"","permalink":"/2019/12/22/New_Blog/","excerpt":"","text":"开荒第一篇 留作纪念","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[{"name":"博客相关","slug":"博客相关","permalink":"/tags/博客相关/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]}]}